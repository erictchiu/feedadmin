a:3:{s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:1:{s:4:"feed";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"C0UNQn45fyp7ImA9Wx9TFk4."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:8:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:45:"tag:blogger.com,1999:blog-6755709643044947179";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-11-24T12:41:33.027-08:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:23:"Android Developers Blog";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"text";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:8:"subtitle";a:1:{i:0;a:5:{s:4:"data";s:33:"An Open Handset Alliance Project.";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:5:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:37:"http://schemas.google.com/g/2005#feed";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:58:"http://android-developers.blogspot.com/feeds/posts/default";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:39:"http://android-developers.blogspot.com/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"next";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:111:"http://www.blogger.com/feeds/6755709643044947179/posts/default?start-index=26&max-results=25&redirect=false&v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:3;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:41:"http://feeds.feedburner.com/blogspot/hsDu";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:4;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:3:"rel";s:3:"hub";s:4:"href";s:32:"http://pubsubhubbub.appspot.com/";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:27:"http://www.w3.org/2005/Atom";a:2:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:9:"A Googler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}s:9:"generator";a:1:{i:0;a:5:{s:4:"data";s:7:"Blogger";s:7:"attribs";a:1:{s:0:"";a:2:{s:7:"version";s:4:"7.00";s:3:"uri";s:22:"http://www.blogger.com";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"entry";a:25:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"C0UNQn4-eCp7ImA9Wx9TFk4."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-6520856294633248526";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-11-24T11:49:00.000-08:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-11-24T12:41:33.050-08:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:33:"Content Rating for Android Market";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:2340:"<p><i>[This post is by Eric Chu, Android Developer Ecosystem. —Tim Bray]</i></p><p>Providing users with more information about applications on Android Market has been a top request from Android users.  Starting in a few weeks, we will be showing content ratings for all applications on Android Market.  This new capability will provide users with additional information to help them select the best applications for them. </p><p>Android Market’s content policy remains the same as before: applications will be rated according to four content rating levels: All, Pre-teen, Teen, &amp; Mature.  Details on the rating levels can be found at <a href=" http://market.android.com/support/bin/answer.py?answer=188189">Android Market Help Center</a>.</p><p>To prepare for this launch, starting next week, developers submitting new or updated applications will be required to include a rating for all applications and games uploaded onto Android Market.  In addition, developers will have the next several weeks to add a rating to their existing applications and games.  Once content rating is visible to users, any applications or games that do not include a rating will be treated as “Mature”.</p><p>We are working hard to rapidly deliver improvements and upgrades to Android Market.  Please look for more Android Market upgrades in the coming weeks.  Thanks for your continued support and please don’t hesitate to <a href="http://www.google.com/support/androidmarket/bin/request.py?contact_type=publisher ">give us feedback</a> on what else we can do to make you more successful with Android and Android Market.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-6520856294633248526?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=l_TBmTJ7AIg:NWGEBN5gUrk:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=l_TBmTJ7AIg:NWGEBN5gUrk:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=l_TBmTJ7AIg:NWGEBN5gUrk:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/l_TBmTJ7AIg" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/6520856294633248526?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/6520856294633248526?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:98:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/l_TBmTJ7AIg/content-rating-for-android-market.html";s:5:"title";s:33:"Content Rating for Android Market";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-11-24T12:41:33.050-08:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:85:"http://android-developers.blogspot.com/2010/11/content-rating-for-android-market.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:1;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"DEMCRn4_fip7ImA9Wx5aFUw."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-4993089007279679782";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-11-11T14:54:00.000-08:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-11-11T15:01:07.046-08:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:25:"Market Housekeeping Alert";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:2829:"<p>We’ve had quite a bit of discussion in this space recently about how to make sure that your app is visible in Android Market to any device that can run it, and only to those devices.  In particular, check out two recent pieces by Reto Meier, <a href="http://android-developers.blogspot.com/2010/06/future-proofing-your-app.html">Future-Proofing Your App</a> and <a href="http://android-developers.blogspot.com/2010/10/five-steps-to-future-hardware-happiness.html">The Five Steps to Future Hardware Happiness</a>.</p><p>As Reto points out, Market used to infer some <code>&lt;uses-feature></code> settings for older apps that were uploaded before certain device features arrived.  This hasn’t been the case for applications uploaded since June of this year; developers have had to be careful about <code>&lt;uses-feature></code> and its <code>android:required</code> attribute.  From what we see, it looks like most of you have got this sorted out and things are working smoothly.</p><p>However, there are still apps that haven’t been re-uploaded since June.  In preparation for introducing some new Market features (that we think you’ll like), we’re about to launch a re-scan of all those legacy apps, looking at their Android Manifests and updating Market’s database.  This means that if you have an app that you haven’t updated since June, and it lacks up-to-date <code>&lt;uses-feature></code> settings, it may stop being visible on certain devices.</p><p>We think the set of apps that will have this problem will be small, if only since most successful apps are updated regularly.  If you want to be sure, check Reto’s advice <a href="http://android-developers.blogspot.com/2010/06/future-proofing-your-app.html">here</a> under "Android Market Rule #2”. </p><p>We’ve said it before but it bears repeating: There are a lot of different sizes and shapes and flavors of Android devices in the product pipeline, and you want your app available on every one that can possibly run it.  So this is an area that is going to be requiring attention from developers on a continuing basis.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-4993089007279679782?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=xtjJejYb-CY:P-9Vgu-Eg18:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=xtjJejYb-CY:P-9Vgu-Eg18:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=xtjJejYb-CY:P-9Vgu-Eg18:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/xtjJejYb-CY" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/4993089007279679782?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/4993089007279679782?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:90:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/xtjJejYb-CY/market-housekeeping-alert.html";s:5:"title";s:25:"Market Housekeeping Alert";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-11-11T15:01:07.046-08:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:77:"http://android-developers.blogspot.com/2010/11/market-housekeeping-alert.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:2;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"DkMCQ3k_fyp7ImA9Wx5aFE4."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-5640970458572467581";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-11-10T16:00:00.000-08:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-11-10T16:14:22.747-08:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:21:"Android Market Action";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:3924:"<p>Almost instantly after I joined Google, it became obvious to me that the number-one area where Android developers wanted to see action and progress was in Android Market; your concerns in this area vastly outweighed whatever issues might be bothering you about the handsets and the framework and the programming tools.  In recent months there has been a steady, quiet, incremental flow of improvements and upgrades. They add up. This is by way of a glance back at developments since the arrival of Froyo last summer.</p><p><em>First</em>, we introduced <a href="http://android-developers.blogspot.com/2010/05/google-feedback-for-android.html">error reporting</a> to Market, so developers can see if their apps are locking up or crashing; and if so, exactly where.</p><p><em>Second</em>, we upgraded the Market publisher site to include user comments, so you can read what people are saying about you, or at least what they’re saying in a language you understand.</p><p><em>Third</em>, we added the <a href="http://android-developers.blogspot.com/2010/07/licensing-service-for-android.html">licensing server</a>, which, when <a href="http://android-developers.blogspot.com/2010/09/securing-android-lvl-applications.html">used</a> <a href=" http://android-developers.blogspot.com/2010/09/proguard-android-and-licensing-server.html">properly</a>, tilts the economics of Android apps toward you, the developer, and against the pirates.</p><p><em>Fourth</em>, we <a href="http://android-developers.blogspot.com/2010/09/more-countries-more-sellers-more-buyers.html">cranked up</a> the number of countries people can buy and sell apps in: as of now, you can sell them in 29 countries and buy them in 32.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TNs0mVhqY5I/AAAAAAAAANY/xjX_bVKvLA4/s1600/MMap.png"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 250px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TNs0mVhqY5I/AAAAAAAAANY/xjX_bVKvLA4/s400/MMap.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5538078000000164754" /></a><p><em>Fifth</em>, we rolled in a “recent changes” feature, a place for developers to put their release notes.  Android Market has a zero-friction process for app update, and the really great apps have followed the “release early, release often” philosophy.  As a developer, I like having a place to write down what’s behind an app release, and as a person who downloads lots of apps, I like to know what the goodies are in each new update.</p><p><em>Sixth</em>, Market now has a “draft upload” feature; this removes a lot of the tension and strain from the app-update process.  Get your screenshots and feature graphics and text and APK all squared away with as much editing as you need to, then update them all with one click.</p><p>You’ll notice that I didn’t say “Sixth and last”, because this is a team on a roll and I expect lots more goodness from them; if you care about the larger Android ecosystem, or are already a developer, or are thinking of becoming one, stay tuned to this channel.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-5640970458572467581?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=7DozGl7Hy9k:9uF_DA8L2UU:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=7DozGl7Hy9k:9uF_DA8L2UU:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=7DozGl7Hy9k:9uF_DA8L2UU:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/7DozGl7Hy9k" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/5640970458572467581?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/5640970458572467581?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:86:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/7DozGl7Hy9k/android-market-action.html";s:5:"title";s:21:"Android Market Action";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-11-10T16:14:22.747-08:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:88:"http://1.bp.blogspot.com/_GTM_W5mVPTU/TNs0mVhqY5I/AAAAAAAAANY/xjX_bVKvLA4/s72-c/MMap.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:73:"http://android-developers.blogspot.com/2010/11/android-market-action.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:3;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"DEQCRXk4fyp7ImA9Wx5UFkU."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-4221173841743953495";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-10-21T10:17:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-10-21T11:39:24.737-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:21:"Improving App Quality";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:15695:"<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TMB-JMl-xsI/AAAAAAAAANM/kWr3jmU5aO0/s1600/Roman.jpg"><img style="border: 5px solid #ddd;  float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 320px; height: 305px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TMB-JMl-xsI/AAAAAAAAANM/kWr3jmU5aO0/s320/Roman.jpg" border="0" alt=""id="BLOGGER_PHOTO_ID_5530559038875420354" /></a><p><i>[This post is by <a href="http://twitter.com/romannurik">Roman Nurik</a>, who is passionate about icons. —Tim Bray]</i></p><p>With thousands of new apps being published in Android Market every week, it’s becoming more and more important to proactively work at breaking through the clutter (hooray for marketing jargon!).  One way of improving your app’s visibility in the ecosystem is by deploying well-targeted mobile advertising campaigns and cross-app promotions. However, there’s another time-tested method of fueling the impression-install-ranking cycle: improve the product!</p><p>A better app can go a very long way: a higher quality app will translate to higher user ratings, generally better rankings, more downloads, and higher retention (longer install periods). High-quality apps also have a much higher likelihood of getting some unanticipated positive publicity such as being featured in Android Market or social media buzz.</p><p>The upside to having a higher-quality app is obvious. However, it’s not always clear how to write a so called ‘better app.’ The path to improving app quality isn’t always well-lit. The term ‘quality’, and its close cousins ‘polish’ and ‘fit and finish’ aren’t always well-defined. In this post, we’ll begin to light the path by looking at a couple of key factors in app quality, and furthermore, look at ways of improving your app along these dimensions.</p><h3>Listen to your users</h3><p>Given that pretty much any measure of the ‘success’ of an app involves user-related metrics such as number of downloads, daily actives, retention rates, etc., it’s a good idea to start thinking of your app’s quality as it relates back to your users.</p><p>The most obvious way to listen to users is by reading and addressing comments on your app in Android Market. Although the comments aren’t always productive or constructive, some will provide valuable insight on aspects of your app that you may not have consciously considered before. It’s important to remember that users have the opportunity to change their ratings and comments about an app as much as they’d like.</p><p>Now, since Android Market doesn’t currently provide a bidirectional communication medium for developers and their users, you should set up your own support and discussion destination(s). There are some great support tools out there that can put you in touch with your users directly such as <a href="http://groups.google.com">Google Groups</a>, <a href="http://discussions.zoho.com/">Zoho Discussions</a>, <a href="http://getsatisfaction.com">getsatisfaction.com</a> and <a href="http://uservoice.com">uservoice.com</a>. Once you get set up with such a tool, make sure to fill in the support link in your Android Market listing -- users do click through to these.</p><p>Another way to better listen to your users is by having a public beta or trusted tester program. It’s crucial to have some amount of real user testing before releasing something in Android Market. Fortunately, you can distribute your apps to users outside of Market via a website; this website can require a login or be publicly accessible&nbsp;&mdash;&nbsp;it’s entirely up to you. Take advantage of this opportunity by offering your next planned update to some early adopters, before submitting to Market. You’ll be surprised by how many little, yet impactful, improvements can come out of crowd-sourced, real-user testing.</p><h3>Improve stability and eliminate bugs</h3><p>I won’t go into detail about why this is important, because hopefully it’s obvious. And hopefully you’ve been reading this blog and following the best practices outlined in previous posts, so you have a solid idea on how to improve in this arena.</p><p>One noteworthy and yet relatively underused tool for catching stability issues like crashes, is the <a href="http://developer.android.com/guide/developing/tools/monkey.html">UI/Application Exerciser Monkey</a> (aka Monkey). Monkey will send random UI events to your app’s activitie, allowing you to trigger user flows that can uncover stability problems.</p><p>Also, with the new <a href="http://android-developers.blogspot.com/2010/05/google-feedback-for-android.html">error reporting features</a> in Android 2.2, users now have the ability to report application crashes to developers. These show up in aggregate in the Android Market developer console. Make sure to read these reports and act on them appropriately.</p><p>Lastly, keep an external bug and feature request tracker. This will enable your users to engage with the app at a closer level, by following features and bugs that affect them. User frustration with app problems can be effectively managed with diligent issue tracking and communication. Some of the community support tools listed above offer issue tracking features, and if your project is open source, most popular repository hosting sites such as <a href="http://code.google.com/hosting">Google Code</a> and <a href="https://github.com/">GitHub</a> will offer this as well.</p><h3>Improve UI Responsiveness</h3><p>One sure-fire way to tick off your users is to have a slow UI. Research has shown that <a href="http://googleresearch.blogspot.com/2009/06/speed-matters.html">speed matters</a>... for any interface, be it desktop, web, or mobile. In fact, the importance of speed is amplified on mobile devices since users often need their information on the go and in a hurry.</p><p>As Brad Fitzpatrick mentioned in his Google I/O 2010 talk, <a href="http://www.youtube.com/watch?v=c4znvD-7VDA">Writing Zippy Android Apps</a>, you can improve your apps’s UI responsiveness by moving long-running operations off the application’s main thread. See the talk for detailed recommendations and debugging tips.</p><p>One way to improve UI performance is to minimize the complexity of your layouts. If you open up <a href="http://developer.android.com/guide/developing/tools/hierarchy-viewer.html">hierarchyviewer</a> and see that your layouts are more than 5 levels deep, it may be time to simplify your layout. Consider refactoring those deeply nested LinearLayouts into RelativeLayout. As Romain Guy pointed out in his <a href="http://www.youtube.com/watch?v=wDBM6wVEO70">World of ListView</a> talk at Google I/O, View objects cost around 1 to 2 KB of memory, so large view hierarchies can be a recipe for disaster, causing frequent VM garbage collection passes which block the main (UI) thread.</p><p>Lastly, as Tim pointed out in <a href="http://android-developers.blogspot.com/2010/10/traceview-war-story.html">Traceview War Story</a>, tools like traceview and ddms can be your best frends for improving performance by profiling method calls and monitoring VM memory allocations, respectively.</p><p>More resources:</p><ul><li><p><a href="http://d.android.com/guide/practices/design/performance.html">Designing for Performance</a></p></li><li><p><a href="http://d.android.com/guide/practices/design/responsiveness.html">Designing for Responsiveness</a></p></li></ul><h3>Improve usability</h3><p>I’ll say it again here, listen to your users! Ask a handful of real Android device users (friends, family, etc.) to try out your application and observe them as they interact with it. Look for cases where they get confused, are unsure how to proceed, or are surprised by certain behaviors. Minimize these cases by rethinking some of the interactions in your app, perhaps working in some of the <a href="http://www.youtube.com/watch?v=M1ZBjlCRfz0">user interface patterns</a> the Android UI team discussed at Google I/O.</p><p>In the same vein, two problems that currently plague Android user interfaces are small tap targets and overly small font sizes. These are generally easy to fix and can make a big impact. As a general rule, optimize for ease of use and legibility, while minimizing, or at least carefully balancing, information density.</p><p>Another way to incrementally improve usability, based on real-world data, is to implement <a href="http://code.google.com/mobile/analytics/docs/">Analytics</a> throughout your app to log usage of particular sections. Consider demoting infrequently used sections to the <a href="http://developer.android.com/guide/topics/ui/menus.html#options-menu">options menu</a>, or removing them altogether. For oftenly-used sections and UI elements, make sure they’re immediately obvious and easily accessible in your app’s UI so that users can get to them quickly.</p><p>Lastly, usability is an extensive and well-documented subject, with close ties to interface design, cognitive science, and other disciplines. If you’re looking for a crash-course, start with <a href="http://www.amazon.com/Design-Everyday-Things-Donald-Norman/dp/0385267746">Donald Norman’s The Design of Everyday Things</a>.</p><h3>Improve appearance and aesthetics</h3><p>There’s no substitute for a real user interface designer&nbsp;&mdash;&nbsp;ideally one who’s well-versed in mobile and Android, and ideally handy with both interaction and visual design. One popular venue to post openings for designers is <a href="http://jobs.smashingmagazine.com">jobs.smashingmagazine.com</a>, and leveraging social connections on Twitter and LinkedIn can surface great talent.</p><p>If you don’t have the luxury of working with a UI designer, there are some ways in which you can improve your app’s appearance yourself. First, get familiar with Adobe Photoshop, Adobe Fireworks, or some other raster image editing tool. Mastering the art of the pixel in these apps takes time, but honing this skill can help build polish across your interface designs. Also, master the resources framework by studying <a href="http://android.git.kernel.org/?p=platform/frameworks/base.git;a=tree;f=core/res/res;h=a3562fe1af94134486a8a899f02a9c2f7986c8dd;hb=master">the framework UI</a> assets and layouts and reading through the new <a href="http://developer.android.com/guide/topics/resources/available-resources.html">resources documentation</a>. Techniques such as 9-patches and resource directory qualifiers are somewhat unique to Android, and are crucial in building flexible yet aesthetic UIs.</p><p>The recently-published <a href="http://www.slideshare.net/AndroidDev/android-ui-design-tips">Android UI Design Tips</a> slide deck contains a few more best practices for your consideration.</p><h3>Deliver the right set of features</h3><p>Having the <em>right</em> set of features in your app is important. It’s often easy to fall into the trap of feature-creep, building as much functionality into your app as possible. Providing instant gratification by immediately showing the most important or relevant information is crucial on mobile devices. Providing too much information can be as frustrating (or even more so) than not providing enough of it.</p><p>And again, listen to your users by collecting and responding to feature requests. Be careful, though, to take feature requests with grains of salt. Requests can be very useful in aggregate, to get a sense of what kinds of functionality you should be working on, but not every feature request needs to be implemented.</p><h3>Integrate with the system and third-party apps</h3><p>A great way to deliver a delight user experience is to integrate tightly with the operating system. Features like <a href="http://developer.android.com/guide/topics/appwidgets/index.html">app widgets</a>, <a href="http://android-developers.blogspot.com/2009/04/live-folders.html">live folders</a>, <a href="http://developer.android.com/guide/topics/search/index.html">global search integration</a>, and <a href="http://developer.android.com/reference/android/widget/QuickContactBadge.html">Quick Contacts badges</a> are fairly low-hanging fruit in this regard. For some app categories, basic features like app widgets are par for the course. Not including them is a sure-fire way to tarnish an otherwise positive user experience. Some apps can achieve even tighter OS integration with the new <a href="http://developer.android.com/resources/articles/contacts.html">contacts</a>, accounts and sync APIs available in Android 2.0 and later. A few sample apps that show how to use these APIs are <a href="http://developer.android.com/resources/samples/SampleSyncAdapter/index.html">SampleSyncAdapter</a> (bundled with the SDK samples) and <a href=" http://code.google.com/p/jumpnote/">JumpNote</a>.</p><p>Third-party integrations can provide even more user delight and give the user a feeling of device cohesiveness. It’s also a really nice way of adding functionality to your app without writing any extra code (by leveraging other apps’ functionalities). For example, if you’re creating a camera app, you can allow users to edit their photos in <a href=" http://mobile.photoshop.com/android/">Photoshop Express</a> before saving them to their collection, if they have that third-party application installed. More information on this subject is available in the <a href="http://developer.android.com/resources/articles/can-i-use-this-intent.html">Can I Use this Intent?</a> article.</p><p>More resources:</p><ul><li><p><a href="http://developer.android.com/guide/practices/design/seamlessness.html">Designing for seamlessness</a></p></li></ul><h3>Pay attention to details...</h3><p>One particular detail I’ll call out is in icon quality and consistency. Make sure your app icons (especially your launcher icon) are crisp and pixel-perfect at all resolutions, and follow the <a href="http://developer.android.com/guide/practices/ui_guidelines/icon_design.html">icon guidelines</a>, at least in spirit if not in letter. If you’re having trouble or don’t have the resources to design the icons yourself, consider using the new <a href="http://android-ui-utils.googlecode.com/hg/asset-studio/dist/index.html">Android Asset Studio</a> tool (a project I’ve recently open-sourced) to generate a set.</p><h3>...and more...</h3><p>Along with this blog, make sure to follow <a href="http://twitter.com/AndroidDev">@AndroidDev</a> on Twitter&nbsp;&mdash;&nbsp;we’re constantly collecting and sharing tips and tricks on Android application development that you won’t always find anywhere else. And of course, don’t be afraid to ask questions in our support forums on <a href=" http://stackoverflow.com/questions/tagged/android">Stack Overflow</a> and <a href="http://groups.google.com/group/android-developers ">Google Groups</a>.</p><p>Thanks for reading!</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-4221173841743953495?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=xCzg2orvo-I:ntg8drEo0cU:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=xCzg2orvo-I:ntg8drEo0cU:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=xCzg2orvo-I:ntg8drEo0cU:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/xCzg2orvo-I" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/4221173841743953495?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/4221173841743953495?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:86:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/xCzg2orvo-I/improving-app-quality.html";s:5:"title";s:21:"Improving App Quality";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-10-21T11:39:24.737-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:89:"http://1.bp.blogspot.com/_GTM_W5mVPTU/TMB-JMl-xsI/AAAAAAAAANM/kWr3jmU5aO0/s72-c/Roman.jpg";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:73:"http://android-developers.blogspot.com/2010/10/improving-app-quality.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:4;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"DkMHQX0-fip7ImA9Wx5UEEU."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-7912268299785783588";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-10-14T12:07:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-10-14T12:27:10.356-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:19:"Traceview War Story";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:11555:"<p>I recently took my first serious look at <a href="http://developer.android.com/guide/developing/tools/traceview.html">Traceview</a>, and it occurred to me, first, that there are probably a few other Android developers who haven&rsquo;t used it and, second, that this is an opportunity to lecture sternly on one of my favorite subjects: performance improvement and profiling.  This is perhaps a little bit Android-101; If you already know all about Traceview, you can stop here and go back to coding.</p><h3>Making Apps Fast</h3><p>Here&rsquo;s a belief that I think I share with most experienced developers: For any app that is even moderately complex, you&rsquo;re not smart enough to predict what the slow parts are going to be, because <em>nobody</em> is smart enough to predict where software bottlenecks will turn up.</p><p>So the smart way to write a fast app is to build it in the simplest way that could possibly work, avoiding egregiously-stupid thing like order-N-squared algorithms and doing I/O on the Android UI thread. Who knows, it might be fast enough, and then you&rsquo;re done!</p><p>If it isn&rsquo;t fast enough, <em>don&rsquo;t guess why</em>.  Measure it and find out, using a profiler.  Actually I&rsquo;ve been known to do this, when backed into a corner, using things like <code>System.err.println("Entered&nbsp;at"&nbsp;+&nbsp;System.currentTimeMillis());</code>  Fortunately, Android comes with a reasonably decent profiler, so you don&rsquo;t have to get ugly like that.</p><h3>Case Study: LifeSaver 2</h3><p>I have this little utility in Android Market called LifeSaver 2, the details are on <a href="http://www.tbray.org/ongoing/When/201x/2010/04/25/LifeSaver-Lessons">my personal blog</a>.  At one point, it reads the SMS and phone-call logs out of the system and persists them in a JSON text file on the SD card.  Since this is kind of slow, it shows a nice dynamic progress bar.  It occurred to me to wonder <em>why</em> it was kind of slow to write a few hundred records into a text file on a device that, after all, has a gigahertz processor.</p><p>Somebody who foolishly disregarded my advice above might assume that the slowdown had to be due to the ContentProvider Cursor machinery reading the system logs, or failing that, the overhead of writing to the SD card.  A wiser person would instrument the code and find out.  Let&rsquo;s do that.</p><h3>Turning On Tracing</h3><p>I went into <a href="http://code.google.com/p/lifesaver/source/browse/trunk/src/com/textuality/lifesaver2/Saver.java">Saver.java</a> and bracketed the code in its <code>run()</code> method like so:</p><pre><code>       public void run() {

            android.os.Debug.startMethodTracing("lsd");

            // ... method body elided

            android.os.Debug.stopMethodTracing();
        }</code></pre><p>The first call turns tracing on, the argument <code>"lsd"</code> (stands for Life Saver Debug, of course) tells the system to put the trace log in <code>/sdcard/lsd.trace</code>.  Remember that doing this means you have to add the <code>WRITE_EXTERNAL_STORAGE</code> permission so you can save the trace info; don&lsquo;t forget to remove that before you ship.</p><p><i>[Update:]</i> Android engineer Xavier Ducrohet writes to remind me: &ldquo;DDMS has a start/stop profiling button in the &lsquo;device view&rsquo;. Upon clicking stop it launches TraceView with the trace file. This is not as fine grained as putting start/stopMethodTracing in your code but can be quite useful. For VMs earlier than froyo, the permission is required as well (DDMS basically automate getting the trace from the sd card and saving it locally before calling traceview). For Froyo+ VMs, the VM is able to send the trace file through the JDWP connection and the permission is not needed anymore (which is really useful).&rdquo; Thanks, Xav!</p><p>Then you run your app, then you copy the output over to your computer, and fire up Traceview.</p><pre><code>540> adb pull /sdcard/lsd.trace
541> traceview lsd</code></pre><p>At this point, you will have noticed three things.  First, turning tracing on really slows down your app. Second, the tracefile is big; in this case, 8.6M for a run that took like four seconds.  Third, that traceview looks pretty cool.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TLah-gMCdTI/AAAAAAAAAMU/AxLCW7Huaig/s1600/big-picture.png"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 204px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TLah-gMCdTI/AAAAAAAAAMU/AxLCW7Huaig/s320/big-picture.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5527783687808251186" /></a><p>The bars across the top show the app&rsquo;s threads and how they dealt out the time; since the Nexus One is single-threaded CPU, they have to take turns.  Let&rsquo;s zero in on one 100-msec segment.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TLdKbzrQRrI/AAAAAAAAAMc/qJ57d4qZB34/s1600/100-msec.png"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 204px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TLdKbzrQRrI/AAAAAAAAAMc/qJ57d4qZB34/s320/100-msec.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5527968909209126578" /></a><p>The top line is where my app code is running (the red segment is GC happening), the middle line is the UI thread and the bursts of activity are the ProgressBar updating, and I have no idea what the third thread, named HeapWorker, does, but it doesn&rsquo;t seem a major contributor to the app&rsquo;s runtime, so let&rsquo;s ignore it.</p><p>The bottom of the screen is where the really interesting data is; it shows which of your methods burned the time, and can be sorted in a bunch of different ways.  Let&rsquo;s zero in on the first two lines.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_GTM_W5mVPTU/TLdLKmTvcPI/AAAAAAAAAMk/OuL7seNe_r0/s1600/println-1.png"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 20px;" src="http://3.bp.blogspot.com/_GTM_W5mVPTU/TLdLKmTvcPI/AAAAAAAAAMk/OuL7seNe_r0/s320/println-1.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5527969713074696434" /></a><p>Translated into English, this tells us that the top-level routine consumed 100% of the time if you include everything it called (well, yeah), but only 0.9% of the time itself.  The next line suddenly starts to get real interesting: <code>java.io.PrintStream.println(Object)</code> and whatever it calls are using 65.2% of the app&rsquo;s time.  This is the code that writes the JSON out to the SD card.  Right away, we know that apparently the task of pulling the data out of the phone&rsquo;s ContentProviders doesn&rsquo;t seem to be very expensive; it&rsquo;s the output that&rsquo;s hurting.</p><p>Can we conclude that the app is limited by the sluggish write performance of the SD card?  Let&rsquo;s drill down, which is done in the most obvious point-and-click way imaginable.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_GTM_W5mVPTU/TLdMMeJzGWI/AAAAAAAAAMs/BI4wgLa3MGE/s1600/println-2.png"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 66px;" src="http://2.bp.blogspot.com/_GTM_W5mVPTU/TLdMMeJzGWI/AAAAAAAAAMs/BI4wgLa3MGE/s320/println-2.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5527970844756875618" /></a><p>Ooh, there&rsquo;s a nasty surprise.  Of course, <code>println</code> calls (in effect) <code>toString()</code> on all its arguments.  It looks like turning the arguments to strings is taking over half the time, before it even dispatches from <code>println(Object)</code> to <code>println(String)</code>.</p><p>I&rsquo;ll skip the step of drilling down into <code>println(String)</code> but it does suggest that yes, there is some slow I/O happening there, to the SD card.  But let&rsquo;s look inside that <code>String.valueOf()</code> call.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_GTM_W5mVPTU/TLdOFDT1wEI/AAAAAAAAAM0/A7l51aVRKk0/s1600/string-value-of.png"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 66px;" src="http://3.bp.blogspot.com/_GTM_W5mVPTU/TLdOFDT1wEI/AAAAAAAAAM0/A7l51aVRKk0/s320/string-value-of.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5527972916315406402" /></a><p>There&rsquo;s your smoking pistol. It turns out that <code>org.json.JSONObject.toString()</code> is what we professional programmers call a, well, this is a family-friendly operation so I won&rsquo;t go there.  You can poke around inside it, but it&rsquo;s just depressing.</p><p>What you can do, however, is sort all the routines by their &ldquo;Exclusive&rdquo; times, as in the number of CPU circles burned right there in the routine.  Here are all of them that use 1% or more of the total execution time.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_GTM_W5mVPTU/TLdO1ig0_vI/AAAAAAAAAM8/psdvyiiAWx4/s1600/top-routines.png"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 148px;" src="http://4.bp.blogspot.com/_GTM_W5mVPTU/TLdO1ig0_vI/AAAAAAAAAM8/psdvyiiAWx4/s320/top-routines.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5527973749325102834" /></a><p>There&rsquo;s a little bit of GC and Android framework View-wrangling stuff in there, but the display is dominated by <code>org.jason</code> and <code>java.lang.StringBuilder</code> code.</p><h3>The Conclusion</h3><p>The real conclusion is that in the case of this app, I actually don&rsquo;t care about the performance. A user runs it a grand total of two times, once on the old phone and once on the new phone, and it&rsquo;s got lots of eye candy, so I just don&rsquo;t think there&rsquo;s a problem.</p><p>If I <em>did</em> want to speed this up, it&rsquo;s obvious what to do.  First, either stop using JSON, or find a cheaper way to serialize it. Second, do fewer <code>println()</code> calls; glom the data together in one big buffer and just blast it out with a single I/O call.  But, and here&rsquo;s the key point, if I&rsquo;d guessed where the bottlenecks were, I&rsquo;d have been wrong, mostly.</p><p>Traceview is a nice tool, and if you don&rsquo;t already know it, you owe it to yourself to learn it.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-7912268299785783588?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=OBTaK8zW7dE:sWYR-90vaE8:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=OBTaK8zW7dE:sWYR-90vaE8:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=OBTaK8zW7dE:sWYR-90vaE8:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/OBTaK8zW7dE" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/7912268299785783588?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/7912268299785783588?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:84:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/OBTaK8zW7dE/traceview-war-story.html";s:5:"title";s:19:"Traceview War Story";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-10-14T12:27:10.356-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:95:"http://1.bp.blogspot.com/_GTM_W5mVPTU/TLah-gMCdTI/AAAAAAAAAMU/AxLCW7Huaig/s72-c/big-picture.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:71:"http://android-developers.blogspot.com/2010/10/traceview-war-story.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:5;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"DE4CRns4eip7ImA9Wx5VGEg."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-8162911226452244273";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-10-11T20:19:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-10-11T21:16:07.532-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:43:"The Five Steps to Future Hardware Happiness";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:5998:"<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TB-isY6azZI/AAAAAAAAAHs/OWjs5UgjLD0/s1600/reto.png"><img style="border: 5px solid #ddd; float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 185px; height: 228px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TB-isY6azZI/AAAAAAAAAHs/OWjs5UgjLD0/s400/reto.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5485281754645974418" /></a><p><i>[This post is by <a href="http://blog.radioactiveyak.com/">Reto Meier</a> AKA <a href="http://twitter.com/retomeier">@retomeier</a>, who <a href="http://www.amazon.com/gp/product/0470565527?tag=interventione-20">wrote the book</a> on Android App development. —Tim Bray]</i></p><p>Two questions I regularly get asked are “Why isn&rsquo;t my app visible on the Market on the (insert device name here)?” and “How can I prepare for GoogleTV and Android tablets?” If you care about how broadly your app is available, pay attention now. Seriously. I don&rsquo;t want to hear anyone telling me they weren&rsquo;t told. <i>[Seems a little combative? -Ed. Take it up a notch! -RM]</i></p><p>By now you&rsquo;ve probably heard of <a href="http://www.google.com/tv">Google TV</a>, the <a href="http://galaxytab.samsungmobile.com/">Samsung Galaxy Tab</a>, and the Dell Streak. These are only the vanguard&nbsp;&mdash;&nbsp;Android is quickly moving to hardware that is increasingly different from the smartphone devices we&rsquo;re used to. The variations in hardware&nbsp;&mdash;&nbsp;including lack of features like GPS, accelerometers, and video cameras&nbsp;&mdash;&nbsp;means it&rsquo;s time for you to think about what hardware your app needs, and what it can function without.</p><p>To make life easier every API includes a <a href="http://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_BLUETOOTH">FEATURE_*</a> constant. To control your app&rsquo;s availability on the Android Market, you specify the features required for your app to work. I&rsquo;d like to encourage you to add manifest Feature nodes for <em>every</em> API you use, specifying them as optional, or not, as appropriate using a manifest uses-feature nodes as shown below:</p><pre><code>&lt;uses-feature android:name="android.hardware.microphone"
              android:required="true"/></code></pre><h3>Market won&rsquo;t be inferring any future API features</h3><p>My earlier post on <a href="http://android-developers.blogspot.com/2010/06/future-proofing-your-app.html">future proofing your apps</a> describes a process of <i>feature inferring</i> that used your app&rsquo;s permissions to help us ensure apps were only visible on the appropriate hardware.</p><p>This process has evolved over time. From now on Market won&rsquo;t be inferring future API features and we have no way to infer some previously available APIs (eg. sensors). As a result you&rsquo;ll need to specify your mandatory and optional feature requirements&nbsp;&mdash;&nbsp;or risk your app either breaking or not being available for some users.</p><h3>The 5 steps to future hardware happiness</h3><ol><li><p>Specify a <a href="http://developer.android.com/guide/topics/manifest/uses-feature-element.html">uses-feature</a> node for every API feature used by your app. This forces you to think about what your app uses, allowing you to:</p></li><li><p>Decide which features are necessary for your app to be useful and mark those featured with the attribute <code>required=true</code>. This lets Market hide your app from any device that doesn&rsquo;t support the hardware features your app requires.</p><p><code>&lt;uses-feature android:name="android.hardware.telephony"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:required="true"/></code></p></li><li><p>For features that aren&rsquo;t strictly required, set <code>required=false</code>.</p><p><code>&lt;uses-feature android:name="android.hardware.bluetooth"<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;android:required="false"/></code></p></li><li><p>Then go in to your code and find where you have used the optional features. Use the <a href="http://developer.android.com/reference/android/content/pm/PackageManager.html#hasSystemFeature(java.lang.String)">hasSystemFeature</a> method from the <a href="http://developer.android.com/reference/android/content/pm/PackageManager.html">PackageManager</a> to determine if the hardware is available and provide alternative paths for your code as appropriate.</p><p><code>PackageManager pm = getPackageManager();<br/>boolean hasCompass = pm.hasSystemFeature(PackageManager.FEATURE_SENSOR_COMPASS);</code></p></li><li><p>Now you can sleep soundly in the knowledge that no matter what variation in Android compatible hardware comes to market, your app will always (and only) be available on those it supports.</p></li></ol><p>You can find more details on how the Android Market uses filters to determine whether to show your application  to a user who is browsing or searching for applications on a given device at the <a href="http://developer.android.com/guide/appendix/market-filters.html">Market Filters</a> page on the Android Developer Site.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-8162911226452244273?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=GQ70GqXgpvc:9VEHMjeZay8:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=GQ70GqXgpvc:9VEHMjeZay8:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=GQ70GqXgpvc:9VEHMjeZay8:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/GQ70GqXgpvc" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8162911226452244273?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8162911226452244273?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:104:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/GQ70GqXgpvc/five-steps-to-future-hardware-happiness.html";s:5:"title";s:43:"The Five Steps to Future Hardware Happiness";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-10-11T21:16:07.532-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:88:"http://1.bp.blogspot.com/_GTM_W5mVPTU/TB-isY6azZI/AAAAAAAAAHs/OWjs5UgjLD0/s72-c/reto.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:91:"http://android-developers.blogspot.com/2010/10/five-steps-to-future-hardware-happiness.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:6;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"DkMBR389fCp7ImA9Wx5VFEQ."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-3443737655581045218";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-10-07T16:00:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-10-07T16:34:16.164-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:43:"Android Market New Country Roll-out Details";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:2382:"<p><i>[This post is by the Android Market team. — Tim Bray]</i></p><p>Last week, <a href="http://android-developers.blogspot.com/2010/09/more-countries-more-sellers-more-buyers.html">we announced</a>  that over the next two weeks, users in 18 additional countries would gain the ability to purchase paid apps from Android Market.  Effective today, users can now see paid apps in Argentina, Belgium, Brazil, Czech Republic, Denmark, Finland, Hong Kong, India, Ireland, Israel, Mexico, Norway, Poland, Portugal, Russia, Singapore, Sweden, and Taiwan.</p><p>For users to make a purchase of paid apps in these countries, they must have the latest Android Market client, which we have started to make available as a self-update and should reach all users within the next few days. This is a silent update; users will not see a notification and will not be prompted to do anything.  If you want to accelerate the self-update process, launch Android Market, navigate back to the Home screen, and after 5-10 minutes, relaunch it.  For more details, please refer to the <a href="http://market.android.com/support/bin/answer.py?answer=190860">Help Center</a>.</p><p>No action is necessary if you have targeted your paid apps to be available to “All Locations” and would like to launch in these additional countries. If you have not selected “All Locations” and would like to target these additional countries, or if you have selected “All Locations” and do not want to launch your apps in these additional buyer countries, please visit the Android Market <a href="http://market.android.com/publish ">publisher site</a> to make the necessary adjustments.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-3443737655581045218?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=qOlhvfJHxJY:eq0dMAXuecc:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=qOlhvfJHxJY:eq0dMAXuecc:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=qOlhvfJHxJY:eq0dMAXuecc:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/qOlhvfJHxJY" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/3443737655581045218?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/3443737655581045218?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:100:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/qOlhvfJHxJY/android-market-new-country-roll-out.html";s:5:"title";s:43:"Android Market New Country Roll-out Details";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-10-07T16:34:16.164-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:87:"http://android-developers.blogspot.com/2010/10/android-market-new-country-roll-out.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:7;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"C0cDR3g9fSp7ImA9Wx5WGEQ."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-8548448998339837356";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-30T12:50:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-30T16:57:56.665-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:41:"More Countries, More sellers, More buyers";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:3280:"<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TKS5gUU1iRI/AAAAAAAAAL4/tabxGMjzP30/s1600/market-bag-intl4.png"><img style="float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 251px; height: 320px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TKS5gUU1iRI/AAAAAAAAAL4/tabxGMjzP30/s320/market-bag-intl4.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5522743007926126866" /></a><p><i>[This post is by Eric Chu, Android Developer Ecosystem. — Tim Bray]</i></p><p>Since we launched Android and Android Market, we have seen the population of Android users and devices expand into many countries.  This widespread adoption has brought with it growing interest in Android Market’s support for the buying and selling of paid applications in these additional countries.</p><p>We have been hard at work on this and it is my pleasure to announce that effective today, developers from 20 more countries can now sell paid apps on Android Market.  Additionally, over the next 2 weeks, users in 18 additional countries will be able to purchase paid apps from Android Market.</p><p>Support for paid application sales is now expanded to developers in 29 countries, with today’s additions of Argentina, Australia, Belgium, Brazil, Canada, Denmark, Finland, Hong Kong, Ireland, Israel, Mexico, New Zealand, Norway, Portugal, Russia, Singapore, South Korea, Sweden, Switzerland and Taiwan.</p><p>In addition, Android Market users from 32 countries will be able to buy apps, with the addition of Argentina, Belgium, Brazil, Czech Republic, Denmark, Finland, Hong Kong, India, Ireland, Israel, Mexico, Norway, Poland, Portugal, Russia, Singapore, Sweden, and Taiwan. No action is necessary if you have targeted your paid apps to be available to “All Locations” and would like to launch in these additional countries. If you have not selected “All Locations” and would like to target these additional countries, or if you have selected “All Locations” and do not want to launch your apps in these additional buyer countries, please visit the Android Market <a href="http://market.android.com/publish">publisher site</a> regularly over the next two weeks to make the necessary adjustments as the new buyer countries launch.</p><p>We remain committed to continuing to improve the buyer and seller experiences on Android Market.  Among other initiatives, we look forward to bringing the Android Market paid apps ecosystem to even more countries in the coming months. Please stay tuned.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-8548448998339837356?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=z2HbA8X-Wdg:5sC6txbv5oY:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=z2HbA8X-Wdg:5sC6txbv5oY:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=z2HbA8X-Wdg:5sC6txbv5oY:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/z2HbA8X-Wdg" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8548448998339837356?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8548448998339837356?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:104:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/z2HbA8X-Wdg/more-countries-more-sellers-more-buyers.html";s:5:"title";s:41:"More Countries, More sellers, More buyers";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-30T16:57:56.665-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:100:"http://1.bp.blogspot.com/_GTM_W5mVPTU/TKS5gUU1iRI/AAAAAAAAAL4/tabxGMjzP30/s72-c/market-bag-intl4.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:91:"http://android-developers.blogspot.com/2010/09/more-countries-more-sellers-more-buyers.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:8;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"DkQBQ34yfip7ImA9Wx5WF08."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-4484948935528975133";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-28T18:25:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-28T18:39:12.096-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:22:"Reflections on G-Kenya";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:6731:"<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TB-isY6azZI/AAAAAAAAAHs/OWjs5UgjLD0/s1600/reto.png"><img style="border: 5px solid #ddd; float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 185px; height: 228px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TB-isY6azZI/AAAAAAAAAHs/OWjs5UgjLD0/s400/reto.png" border="0" alt="" id="BLOGGER_PHOTO_ID_5485281754645974418" /></a><p><i>[This post is by <a href="http://blog.radioactiveyak.com/">Reto Meier</a> AKA <a href="http://twitter.com/retomeier">@retomeier</a>, who <a href="http://www.amazon.com/gp/product/0470565527?tag=interventione-20">wrote the book</a> on Android App development. — Tim Bray]</i></p><p>Recently I visited Kenya for the three-day <a href="http://sitescontent.google.com/gkenya/">G-Kenya event</a>. I was there for two reasons:</p><ul><li><p>To talk about Android and the emerging mobile opportunities for African developers.</p></li><li><p>To ask questions and find out more about the reality of mobiles and writing code from the people there.</p></li></ul><p>Of the countries I’ve visited to talk about Android, nowhere have people had such a close connection to their mobile phones as in Africa. While most Kenyans own feature phones, those mobiles are already used as much more than simple phones. <a href="http://www.safaricom.co.ke/index.php?id=745">Mobile payments</a> are already common, and cheap data plans mean that many people access the Internet exclusively through mobile handsets.</p><p>There were two Android announcements while I was in town: a new low-cost Android handset (the <a href="http://www.huawei.com/africa/en/catalog.do?id=741">Huawei U8220</a>), and Android Market access for Kenyans. I can’t wait to see the kind of apps that come from developers who live in an environment where mobile is so pervasive.</p><h3>Day 1: Students</h3><p>G-Kenya was set within the beautiful campus of the Strathmore Business School, so it was fitting that day one was addressed to students.</p><p>Of the three groups, the students where the most enthusiastic about Android. This was likely influenced by their confidence that by the time they graduate, modern smartphones in Africa will have become the norm.</p><p>I love talking to student developers&nbsp;&mdash;&nbsp;without the commercial pressures of finding customers or a monetization model&nbsp;&mdash;&nbsp;they're free to innovate on whatever technology platforms they think are interesting.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_GTM_W5mVPTU/TKKXtmakzBI/AAAAAAAAALw/E1e5_c9vnt8/s1600/rk.png"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 236px;" src="http://3.bp.blogspot.com/_GTM_W5mVPTU/TKKXtmakzBI/AAAAAAAAALw/E1e5_c9vnt8/s400/rk.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5522142902771567634" /></a><h3>Day 2: Developers</h3><p>Modern smartphones are not yet prevalent in Africa, so it wasn’t surprising that many of the developers are currently focusing on feature phones. That said, it was generally acknowledged that it was a question of when rather than if smartphones would come to dominate. The trick will be picking the right time to invest in Android so that they're ready to take advantage.</p><p>Plenty of developers believe that time is right now. It was a pleasure to meet the guys behind <a href="http://www.ushahidi.com/">Ushahidi</a>, creators of an Android app created to report and record incidents during the 2008 election violence. Since their launch they’ve expanded to offer a global platform for crowd-sourced news where timeliness is critical.</p><p>I love opportunity the Android Market delivers to developers like the idea of developers like Ushahidi and <a href="http://www.littlefluffytoys.com/">Little Fluffy Toys</a> (of London Cycle Hire fame). An app the solves a problem for your local community can easily be expanded to offer solutions to similar problems across the world.</p><p>Developer focus in Kenya seemed to follow similar lines:</p><ul><li><p>Create products and services targeted at local communities (such as the developers creating a distributed system to help health-care workers record medical information in the field.)</p></li><li><p>Build robust cloud-based services that provide access to users from any mobile platform.</p></li><li><p>Expand from feature phones to Android to incorporate features like GPS positioning, maps, and recording video and audio.</p></li></ul><h3>Day 3: Entrepreneurs and Marketers</h3><p>No one was surprised to see a lot of the developers from the previous day return for entrepreneur day, and the apparent lack of Android questions from Day 2 was more than made up for on day 3; the &ldquo;AppEngine Challenge&rdquo; on Day 2 fielded a record 30 entries, so it seems everyone was working on their entries rather than asking questions!</p><p>I didn’t speak on Day 3, but spent all day fielding questions from eager mobile developers hoping to catch the Android wave as early innovators and first movers. That included a team who were working to provide real-time public transit tracking of <a href="http://www.google.com/images?q=Matatu&um=1&ie=UTF-8&source=univ&ei=206PTNfMCMrj4AbE8fXpDg&sa=X&oi=image_result_group&ct=title&resnum=1&ved=0CCAQsAQwAA&biw=1280&bih=680">Matatu</a> via GPS and Android devices.</p><h3>Reflections</h3><p>It’s an exciting time to be a developer in Kenya. I regularly asked developers how long they thought it would take for Android devices to become common place. Many suggested if I came back this time next year I'd see a flood of Android devices. Even the more pessimistic predicted no more than 3 years.</p><p>As I traveled back towards Jomo Kenyatta International, listening to the radio offering a free Sony Ericsson X10 Mini to one lucky caller, the future didn’t seem very far away.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-4484948935528975133?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=FT6vpbGsgj8:AGjbCRoqmx8:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=FT6vpbGsgj8:AGjbCRoqmx8:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=FT6vpbGsgj8:AGjbCRoqmx8:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/FT6vpbGsgj8" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/4484948935528975133?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/4484948935528975133?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:90:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/FT6vpbGsgj8/reflections-on-g-kenya_28.html";s:5:"title";s:22:"Reflections on G-Kenya";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-28T18:39:12.096-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:88:"http://1.bp.blogspot.com/_GTM_W5mVPTU/TB-isY6azZI/AAAAAAAAAHs/OWjs5UgjLD0/s72-c/reto.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:77:"http://android-developers.blogspot.com/2010/09/reflections-on-g-kenya_28.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:9;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"DkAESXY6eip7ImA9Wx5WEUw."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:67:"tag:blogger.com,1999:blog-6755709643044947179.post-7512701459510109";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-21T16:05:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-21T17:18:28.812-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:43:"Proguard, Android, and the Licensing Server";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:6805:"<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_GTM_W5mVPTU/TJk_0I5IKTI/AAAAAAAAALo/8kAVoK6HF4I/s1600/Galpin.png"><img style="border: 5px solid #ddd; float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 184px; height: 228px;" src="http://4.bp.blogspot.com/_GTM_W5mVPTU/TJk_0I5IKTI/AAAAAAAAALo/8kAVoK6HF4I/s400/Galpin.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5519512983292094770" /></a><p><i>[This post is by Dan Galpin, an Android Developer Advocate specializing in games and comics. — Tim Bray]</i></p><p>The <a href="http://android-developers.blogspot.com/2010/09/securing-android-lvl-applications.html">Securing Android LVL Applications</a> blog post makes it clear that an Android developer should use an obfuscation tool such as Proguard in order to help safeguard their applications when using License Server.  Of course, this does present another question.  How should one integrate such a tool with the Android build process?  We’re specifically going to detail integrating Proguard in this post.</p><h3>Before you Begin</h3><p>You must be running the latest version of the Android SDK Tools (at least v7).  The new Ant build rules file included with v7 contains hooks to support user-created pre and post compile steps in order to make it easier to integrate tools such as Proguard into an Android build.  It also integrates a single rules file for building against all versions of the Android SDK.</p><h3>Adding an Optimization Step to build.xml</h3><p>First, you’ll have to <a href=" http://proguard.sourceforge.net/index.html#/downloads.html">get Proguard</a> if you don’t yet have it.</p><p>If you’ve been using Eclipse to do your development, you’ll have to switch to using the command line.  Android builds are done using Apache Ant.  A version of Ant ships along with Eclipse, but I recommend <a href="http://ant.apache.org/bindownload.cgi">installing</a> your own version.</p><p>The Android SDK <a href=" http://developer.android.com/guide/developing/other-ide.html">can build you</a> a starter build.xml file. Here is how it’s done:</p><pre><code>android update project --path ./MyAndroidAppProject</code></pre><p>If all works well, you’ll have a shiny new build.xml file sitting in your path.  Let’s try doing a build.</p><pre><code>ant release</code></pre><p>You should end up with an unsigned release build.  The command-line tools can also sign your build for you.  You’ll notice that the android tool created a local.properties file in your directory.  It will contain the sdk.dir property. You can have it make you a signed build by adding the location of your keystore and alias to this file.</p><pre><code>key.store=/Path/to/my/keystore/MyKeystore.ks
key.alias=myalias</code></pre><p>So, now you have a signed build from the command line, but still no obfuscated build.  To make things easy, you’re going to want to get two helper files: <a href="http://android-proguard-commandline.googlecode.com/files/add-proguard-release.xml">add-proguard-release.xml</a> and <a href="http://android-proguard-commandline.googlecode.com/files/procfg.txt ">procfg.txt</a>.</p><p>Copy these files into your root directory (where the build.xml file sits). To add Proguard to your build, you first need to edit your local properties file to add the location of the directory that Proguard is installed in:</p><pre><code>proguard.dir=/Directory/Proguard/Is/Installed/In</code></pre><p>Finally... you need to add our script to your build file and have it override a few targets.  To do this, we use the XML “entity” construct. At the top of your build.xml file, add an entity that references our script file:</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE project [
       &lt;!ENTITY add-proguard-release SYSTEM "add-proguard-release.xml">
]></code></pre><p>You’re not done yet.  Somewhere within the project tag add the reference to our entity to include our script.</p><pre><code>&lt;project name="MyProjectName" default="help">
&amp;add-proguard-release;</code></pre><p>That’s it!  In many cases, calling</p><pre><code>ant release</code></pre><p>Will give you an obfuscated build.  Now test and make sure that it hasn’t broken anything.</p><h3>But Wait, My App is Crashing Now</h3><p>Most crashes happen because Proguard has obfuscated away something that your application needs, such as a class that is referenced in the AndroidManifest or within a layout, or perhaps something called from JNI or reflection.  The Proguard configuration provided here tries to avoid obfuscating most of these cases, but it’s still possible that in edge cases you’ll end up seeing something like a <code>ClassNotFoundException</code>.</p><p>You can make edits to the procfg.txt file to keep classes that have been obfuscated away.  Adding: </p><pre><code>-keep public class * [my classname]</code></pre><p>should help. For more information about how to prevent Proguard from obfuscating specific things, see the <a href="http://proguard.sourceforge.net/">Proguard manual</a>.  Specifically, the keep section.  In the interest of security, try to keep as little of your application unobfuscated as possible.</p><p>The standard settings provided in procfg.txt will be good for many applications, and will catch many common cases, but they are by no means comprehensive.  One of the things that we’ve done is had Proguard create a bunch of output files in the obf directory to help you debug these problems.</p><p>The mapping.txt file explains how your classes have been obfuscated.  You’ll want to make sure to keep this around once you have submitted your build to Market, as you’ll need this to decipher your stack traces.</p><h3>Conclusion</h3><p>Tools such as Proguard make the binary of your application harder to understand, and make your application slightly smaller and more efficient at the same time, at the cost of making it slightly more challenging to debug problems in the field.  For many applications, the tradeoff is more than worthwhile.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-7512701459510109?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=1rFQgR3KFiQ:jw3LevlQVYM:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=1rFQgR3KFiQ:jw3LevlQVYM:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=1rFQgR3KFiQ:jw3LevlQVYM:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/1rFQgR3KFiQ" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:83:"http://www.blogger.com/feeds/6755709643044947179/posts/default/7512701459510109?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:83:"http://www.blogger.com/feeds/6755709643044947179/posts/default/7512701459510109?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:102:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/1rFQgR3KFiQ/proguard-android-and-licensing-server.html";s:5:"title";s:43:"Proguard, Android, and the Licensing Server";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-21T17:18:28.812-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:90:"http://4.bp.blogspot.com/_GTM_W5mVPTU/TJk_0I5IKTI/AAAAAAAAALo/8kAVoK6HF4I/s72-c/Galpin.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:89:"http://android-developers.blogspot.com/2010/09/proguard-android-and-licensing-server.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:10;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"CE4NRX04eSp7ImA9Wx5XFU0."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-8853607923511918509";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-14T15:05:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-14T15:23:14.331-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:37:"Supporting the new music Voice Action";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:5472:"<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TI_1sY8-RNI/AAAAAAAAALg/ekGl15yRUaI/s1600/Picture+60.png"><img style="float:left; margin:0 10px 10px 0;cursor:pointer; cursor:hand;width: 188px; height: 200px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TI_1sY8-RNI/AAAAAAAAALg/ekGl15yRUaI/s200/Picture+60.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5516898211513386194" /></a><p><i>[This post is by Mike LeBeau, the Tech Lead and architect behind Voice Actions. — Tim Bray]</i></p><p>We recently launched <a href="http://googleblog.blogspot.com/2010/08/just-speak-it-introducing-voice-actions.html ">Voice Actions</a> in the new Google Voice Search for Android&nbsp;&mdash;&nbsp;an awesome new way to search, control, and communicate on your phone faster than ever before, by using your voice.</p><p>One of these new Voice Actions lets users find and automatically play music. By speaking something like “listen to They Might Be Giants” into the new Voice Search, users can quickly find the music they want online and play it, using any number of different apps. (<a href="http://www.pandora.com/android">Pandora</a>, <a href="http://www.last.fm/hardware/android">Last.fm</a>, <a href="http://www.spotify.com/int/mobile/android/ ">Spotify</a>, <a href="http://www.mspot.com/music/learn_mobile">mSpot</a>, and <a href="http://www.rdio.com/apps/mobile/">Rdio</a> are among the first apps to support this.)</p><p>To do this, we leveraged a very common little piece of Android magic: a new <a href="http://developer.android.com/reference/android/content/Intent.html">Intent</a>. If you develop a music app that supports open-ended music search, you can make it work with users speaking “listen to” Voice Actions simply by registering for the new intent we’ve defined. This new intent isn’t defined as a constant in the SDK yet, but we wanted to make sure music app developers had all the information needed to use it right away.</p><p>Here’s all you should need to know:</p><ul><li><p>In your <code>AndroidManifest.xml</code>, just register one of your activities for the new intent <code>android.media.action.MEDIA_PLAY_FROM_SEARCH</code>:</p><pre><code>&lt;application android:label="@string/app_name" android:icon="@drawable/icon">
    &lt;activity android:name="MusicActivity" android:label="@string/app_name">
        &lt;intent-filter>
            &lt;action android:name="android.media.action.MEDIA_PLAY_FROM_SEARCH" />
            &lt;category android:name="android.intent.category.DEFAULT" />
        &lt;/intent-filter>
    &lt;/activity>
&lt;/application></code></pre></li><li><p>When your activity receives this intent, you can find the user’s search query inside the <a href="http://developer.android.com/reference/android/app/SearchManager.html#QUERY">SearchManager.QUERY</a> string extra:</p><pre><code>import android.app.Activity;
import android.app.SearchManager;

public class MusicActivity extends Activity {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        String query = getIntent().getStringExtra(SearchManager.QUERY);
        // Do something with query...
    }
}</code></pre><p>This will represent everything the user spoke after “listen to”. This is totally open-ended voice recognition, and it expects very flexible search&nbsp;&mdash;&nbsp;so, for example, the string could be the name of any artist (“they might be giants”), an album (“factory showroom”), a song (“metal detector”), or a combination of any of these (“metal detector by they might be giants”).</p></li></ul><p>A few subtle details worth understanding about this intent:</p><ul><li><p>Your app should do its best to quickly find and <em>automatically play</em> music corresponding to the user’s search query. The intention here is to get users to their desired result as fast as possible, and in this case, that means playing music quickly.</p></li><li><p>This will really only work well for music apps that can find music across a very large corpus of options. Because our voice recognition doesn’t currently support any way to provide a list of specific songs to be recognized, trying to use it against a small set of music choices will work poorly&nbsp;&mdash;&nbsp;things which are not in the set will be over-recognized, and things which are in the set may not be recognized well. So if you’re not the developer of a large-scale cloud music application, this intent is probably not for you.</p></li></ul><p>We think you’ll find this new intent can greatly enhance your music app’s experience for users. And we hope you enjoy our new Voice Actions as much as we do!</p>

<p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-8853607923511918509?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=8eHMiTuJig0:NUYx-ilF9Fg:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=8eHMiTuJig0:NUYx-ilF9Fg:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=8eHMiTuJig0:NUYx-ilF9Fg:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/8eHMiTuJig0" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8853607923511918509?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8853607923511918509?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:98:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/8eHMiTuJig0/supporting-new-music-voice-action.html";s:5:"title";s:37:"Supporting the new music Voice Action";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-14T15:23:14.331-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:94:"http://1.bp.blogspot.com/_GTM_W5mVPTU/TI_1sY8-RNI/AAAAAAAAALg/ekGl15yRUaI/s72-c/Picture+60.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:85:"http://android-developers.blogspot.com/2010/09/supporting-new-music-voice-action.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:11;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"D04HQn46eyp7ImA9Wx5XFE0."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-3608954705799938155";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-13T08:20:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-13T12:25:33.013-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:19:"Screen Geometry Fun";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:7964:"<p>The recent announcement of the <a href="http://galaxytab.samsungmobile.com/">Samsung Galaxy Tab</a> should be a wake-up call for Android developers. What’s scary is that we’ve never seen a screen like this on an Android device before. What’s reassuring is that most apps Just Work (in fact, a lot of the ones I’ve tried so far have looked terrific) and the potential problems are easy to avoid. Here’s what you need to do to take advantage of not just the Tab, but all the new form factors that are coming down the pipe.</p><p>Let’s consider the Tab as a “teachable moment”:</p><ul><li><p>Its screen is 1024x600; no compatible device’s screen has ever had a thousand pixels in any dimension before.</p></li><li><p>A lot of people are going to want to hold it sideways, in “landscape” mode, most of the time.</p></li></ul><p>We recommend spending quality time with the Developers’-guide discussion of <a href="http://developer.android.com/guide/practices/screens_support.html">supporting multiple screens</a>; we'll be revising that regularly when required as the device landscape changes.  Also, this blog recently ran Dan Morrill’s <a href="http://android-developers.blogspot.com/2010/09/one-screen-turn-deserves-another.html">One Screen Turn Deserves Another</a>, which should help out in handling the landscape default.</p><h3>What density means</h3><p>When you build your app, you can provide layouts and assets (graphics) which vary by screen density, screen size, and landscape or portrait orientation. Clearly, pulling these together is not as much fun as designing groovy layouts and clever Intent filters; but there’s no way around it.</p><p>In this context, the Samsung has another little surprise: If you do the arithmetic, its screen has 170 DPI, which is far from the densest among Android devices. Still, it declares itself as “hdpi” (and as having a “large” screen size). The reason is simple: It looks better that way.</p><p>Samsung found that if you rendered your graphical resources bit-for-bit using medium-density sources, they looked great, but most large-screen designs ended up looking sparse, with too much space between buttons and icons. At high resolution, the framework scales up the resources an amount that turns out to be just enough.</p><p>As a photography hobbyist, I’m reminded of how you juggle aperture and shutter speed and ISO sensitivity. If, for example, you want a fast shutter speed to capture a dancer in mid-leap, you’d better compensate with a wider aperture or more sensitivity. Similarly, the Galaxy Tab’s screen is at the large end of “large”, so declaring it as high-density applies a useful compensation.</p><p>The good news is that the scaling code in the framework is smart enough and fast enough that it comes out well; the graphics in my own apps look remarkably good on the Tab.  Here is the front page of my “LifeSaver 2” app; first the Nexus One, then the Galaxy Tab, resized for presentation here.  Different densities, different geometries, and the only important difference is that the version on the big screen looks prettier.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_GTM_W5mVPTU/TIUI9DyzERI/AAAAAAAAAKo/T_9K5s9XTFU/s1600/N1-landscape.png"><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 192px;" src="http://3.bp.blogspot.com/_GTM_W5mVPTU/TIUI9DyzERI/AAAAAAAAAKo/T_9K5s9XTFU/s320/N1-landscape.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5513823163868451090" /></a><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TIUJGPctlsI/AAAAAAAAAKw/TZa-LSbu8ZQ/s1600/P1-2.png"><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 320px; height: 187px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TIUJGPctlsI/AAAAAAAAAKw/TZa-LSbu8ZQ/s320/P1-2.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5513823321615865538" /></a><p>Your take-away should be what I said above: Make sure you provide your graphics at all three resolutions, and chances are the Android framework will find a way to make them look great on a huge variety of devices.</p><h3>Other Ways To Go Wrong</h3><p>As I noted, most apps work just fine on this kind of device, out of the box, no changes required. However, we have run across a few Worst Practices that can make your app look dorky or even broken; for example:</p><ul><li><p>Using AbsoluteLayout; this is a recipe for trouble.</p></li><li><p>Using absolute rather than density-independent pixels.</p></li><li><p>One member of my group ran across a couple of apps that suffered a Null Pointer Exception because they were calculating screen size when their Activity started, and doing their own resource loading rather than letting the framework take care of it.  The problem was that they hadn't built in handling for the 1024x600 screen.  The problem would vanish if they'd hand the work to the framework (or at least make sure that all their <code>switch</code> statements had <code>default</code> cases).</p></li></ul><h3>Escape the Shoebox</h3><p>I've observed that a certain number of applications appear “shoeboxed”, running in a handset-like number of pixels in the center of the screen, surrounded by a wide black band. They work fine, but this is silly, and easy to avoid. It turns out that this happens when you have a <a href="http://developer.android.com/guide/topics/manifest/uses-sdk-element.html"><code>targetSdkVersion</code></a> value less than four; this is interpreted to mean that you’re targeting the legacy Cupcake flavor of Android, which only supported HVGA.</p><p>In any case, if you want to make 100% sure that your app doesn’t get pushed into the shoebox, the <a href="http://developer.android.com/guide/topics/manifest/supports-screens-element.html"><code>supports-screens</code></a> element is your friend; here’s what we recommend:</p><pre><code>&lt;supports-screens android:largeScreens="true" android:anyDensity="true" /></code></pre><p>(Both those attributes default to "false" for API levels less than 4.) Given a chance, the framework gets a good result on almost any Android screen imaginable.</p><h3>Testing</h3><p>When a device comes along that’s different in one way or another from what’s been available before, and you don’t have one, the only way to be sure your app will treat it properly is to run it on an Android emulator; the emulator code is flexible enough to model anything we’ve seen or know is coming down the pipe.</p><p>In the case of the Galaxy Tab, Samsung will be providing an add-on including a custom AVD and skin as an SDK add-on, to make your life easier; I used a pre-release to make the LifeSaver screenshot above.</p><h3>Why All the Extra Work?</h3><p>Because, as 2010 winds down, Android <a href="http://android-developers.blogspot.com/2010/09/brace-for-future.html">isn’t just for phones</a>, and isn’t just for things that fit in your pocket. The minor effort required to deal with this should pay off big-time in terms of giving your apps access to a universe of new kinds of devices.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-3608954705799938155?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=J3B2wPywoHg:3HP4wF6Zh9E:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=J3B2wPywoHg:3HP4wF6Zh9E:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=J3B2wPywoHg:3HP4wF6Zh9E:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/J3B2wPywoHg" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/3608954705799938155?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/3608954705799938155?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:84:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/J3B2wPywoHg/screen-geometry-fun.html";s:5:"title";s:19:"Screen Geometry Fun";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-13T12:25:33.013-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:96:"http://3.bp.blogspot.com/_GTM_W5mVPTU/TIUI9DyzERI/AAAAAAAAAKo/T_9K5s9XTFU/s72-c/N1-landscape.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:71:"http://android-developers.blogspot.com/2010/09/screen-geometry-fun.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:12;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"DUYCSX4-fip7ImA9Wx5XEEs."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-1800405278316157173";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-09T13:33:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-09T14:19:28.056-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:32:"One Screen Turn Deserves Another";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:13920:"<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_GTM_W5mVPTU/TH_WXasAf0I/AAAAAAAAAKg/gRhqNnRJovQ/s1600/Dan.png"><img style="float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 320px; height: 320px;" src="http://3.bp.blogspot.com/_GTM_W5mVPTU/TH_WXasAf0I/AAAAAAAAAKg/gRhqNnRJovQ/s320/Dan.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5512360166714015554" /></a><p><i>[This post is by Dan Morrill, Open Source &amp; Compatibility Program Manager. — Tim Bray]</i></p><p>Android has an <a href="http://developer.android.com/reference/android/hardware/SensorManager.html">API for accessing a variety of sensor types</a>, such as an accelerometer or light sensor. Two of the most commonly-used sensors are accelerometers and magnetometers (that is, compasses.) Applications and devices frequently use these as forms of user input, and to determine which way to orient the screen.</p><p>However, there’s a new wrinkle: recently, a few devices have shipped (see <a href="http://www.motorola.com/Consumers/US-EN/Consumer-Product-and-Services/Mobile-Phones/MOTOROLA-CHARM-with-MOTOBLUR-US-EN">here</a> and <a href="http://mediacenter.motorola.com/content/detail.aspx?ReleaseID=12865&NewsAreaId=2">here</a>) that run Android on screens that are naturally landscape in their orientation. That is, when held in the default position, the screens are wider than they are tall. This introduces a few fairly subtle issues that we’ve noticed causing problems in some apps. Now, part of the reason for this is that the Android SDK docs on the sensor API left a couple things unsaid, leading many developers to use them incorrectly. Even a couple of our own samples did the wrong thing. Sorry about that!</p><p>Fortunately, using these APIs correctly is pretty simple, if you keep three rules in mind:</p><ul><li><p>The sensor coordinate system used by the API for the natural orientation of the device does not change as the device moves, and is the same as the OpenGL coordinate system.</p></li><li><p>Applications must not assume that the natural orientation is portrait. That's not true on all devices.</p></li><li><p>Applications that match sensor data to on-screen display must always use <code>android.view.Display.getRotation()</code> to map sensor coordinates to screen coordinates&nbsp;&mdash;&nbsp;even if their manifest specifies portrait-only display.</p></li></ul><p>If you have a strong background in math, the three rules above may be all you need to work out the rest. But if that’s not you, the rest of this post explains things step-by-step, and gives some tips for using sensors correctly.</p><h3>The Basic Problem</h3><p>Before we dive in, here’s a tip that I personally have found to be helpful: always remember that <em>the sensor data’s coordinate system never changes. Ever.</em> The rest of this post is going to talk about coordinate systems and rotations and so on. But sometimes when your head is deep in 3D transforms, you can get disoriented, so I’ve found it helps to frequently remind myself that no matter what is happening to the screen, the sensor coordinate system never changes.</p><p>Now with that tip in mind, we need an example to talk about. Let’s consider a simple app that draws an arrow that always points in the direction of gravity, animating the arrow as the user moves the phone around, like a <a href="http://en.wikipedia.org/wiki/Plumb-bob">plumb-bob</a>. When a typical phone is held normally, the arrow points down, as shown in Figure A:</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TIlO8Tq8uwI/AAAAAAAAALI/SiTXyfWzDEI/s1600/figureA.png"><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 249px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TIlO8Tq8uwI/AAAAAAAAALI/SiTXyfWzDEI/s400/figureA.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5515026016671415042" /></a><p><i>(Note: In the figures in this post, the letter “G” means the direction of gravity in the sensor coordinate system. In Figure A, for example, “G = -y” means that gravity is aligned with the device’s negative-Y axis, as measured by the accelerometer. And remember&nbsp;&mdash;&nbsp;the sensor coordinate system never changes!)</i></p><p>This app is pretty straightforward to implement in OpenGL: you simply need to draw an arrow on a GL SurfaceView, after rotating the coordinate space in response to the sensor data returned by the accelerometer. This “just works” because&nbsp;&mdash;&nbsp;in this basic case&nbsp;&mdash;&nbsp;the OpenGL screen coordinate system lines up with the sensor coordinate system.</p><p>So, this technique works, and the arrow will always point down&nbsp;&mdash;&nbsp;until you turn the phone too far.</p><h3>So What’s the Problem?</h3><p>Most Android devices use the accelerometer to detect when the device is being held sideways, and rotate the screen accordingly. This normally causes the apps to display horizontally, from the point of view of the user.</p><p>What this reorientation actually does is remap the X and Y axes, causing the app to draw itself horizontally. However, the Android sensor APIs define the sensor coordinate space to be relative to the <em>top</em> and <em>side</em> of the device&nbsp;&mdash;&nbsp;<em>not</em> the short and long sides. When the system reorients the screen in response to holding the phone sideways, the sensor coordinate system no longer lines up with the screen’s coordinate system, and you get unexpected rotations in the display of your app. Figure B shows an example:</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TIlPGGJ9X7I/AAAAAAAAALQ/ik9-7hVqs_s/s1600/FigureB.png"><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 124px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TIlPGGJ9X7I/AAAAAAAAALQ/ik9-7hVqs_s/s400/FigureB.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5515026184842076082" /></a><p>There are are a couple different fixes for this problem that are commonly used today, but we’ve noticed that these often don’t work properly on landscape-default devices.</p><p>A common first attempt to solve the auto-rotation problem is to simply lock the screen to portrait mode, via the <a href="http://developer.android.com/guide/topics/manifest/activity-element.html#screen"><code>android:screenOrientation</code></a> attribute in AndroidManifest.xml. This prevents the system from performing a screen coordinate system remap in response to device orientation, and so the sensor and screen coordinate systems remain in sync. However, locking the screen to portrait mode this way <em>prevents</em> the coordinate systems from getting out of sync on portrait-default devices, but causes them to become out of sync on landscape-default devices. This is because it forces a screen reorientation on those devices.</p><p>The second common technique is to detect when the device is in landscape mode, and compensate for it by adding a rotation to the graphics that are displayed. Unfortunately, this technique is often only a partial fix, because if you aren’t careful about detecting landscape mode, you will again <em>cause</em> an unnecessary compensation on landscape-default devices.</p><h3>The Correct Fix</h3><p>So what’s a poor developer to do?  This seems like a catch-22: you can’t <em>prevent</em> screen reorientation, but you can’t <em>compensate</em> for it, either.</p><p>Or can you? Actually, you can compensate&nbsp;&mdash;&nbsp;you just have to make sure you’re correctly detecting when compensation is necessary. The question is, how does the device tell you that it’s been reoriented?  And the answer is: <a href="http://developer.android.com/reference/android/view/Display.html#getRotation()"><code>android.view.Display.getRotation()</code></a>.</p><p>That method will return one of four values, indicating that either the device has not been reoriented (ROTATION_0), or that it has been reoriented by 90 degrees, 180 degrees, or 270 degrees (which respectively are ROTATION_90, ROTATION_180, and ROTATION_270.)</p><p>Pay special attention to those last two. ROTATION_180 and ROTATION_270 mean that each device actually has <em>two</em> portrait and <em>two</em> landscape modes: normal portrait and landscape, and the upside-down versions of each. Some Android devices that do “360 reorientation” will use these rotation modes as well, so you need to handle this generally, beyond just accounting for portrait or landscape mode.</p><p>Once you have the screen orientation info in hand, you can treat it as a rotation around the screen’s Z axis when rendering graphics. By applying the rotation to the values you get from your <code>SensorEventListener</code>, you can correctly and reliably compensate for screen reorientations on all devices.</p><p>Note that <code>Display.getRotation()</code> will tell you if the screen has been reoriented at all, not that it was reoriented specifically in response to the accelerometer. For example, even if you disable accelerometer-based reorientation by using <code>android:screenOrientation=”nosensor"</code>, your app might still be reoriented if the user has opened a hard keyboard on the device.</p><p>Because handling all this involves some math that can be a bit of a chore, as a convenience we’ve provided the <a href="http://developer.android.com/reference/android/hardware/SensorManager.html#remapCoordinateSystem(float[],%20int,%20int,%20float[])"><code>android.hardware.sensor.SensorManager.remapCoordinateSystem()</code></a> method to do much of this remapping work for you. If you choose not to do use this method, you can achieve a similar effect by essentially swapping axes, along with the rule of thumb that 2 axis swaps requires that you negate the third axis. (Since this is a bit error-prone, we do recommend that you use <code>remapCoordinateSystem()</code> when you can.)</p><h3>Recipes for Sensuous Delights</h3><p>Okay, now we’ve got a technique that we can rely on to work on all devices. But how do you update your app? To give you a more explicit helping hand on how to fix your apps, I’ve whipped up a few recipes for updating your apps.</p><h4>Apps That Never Draw Sensor Data</h4><p>Apps that never display graphics derived from sensor data usually don’t need to make any changes.  Examples of this type of app are those that detect for bumps to the device, those that use sensors for gesture input, apps that monitor g-forces (watching for free-fall or acceleration), and so on.  These apps aren’t drawing images that vary according to the device’s orientation.</p><p>This isn’t a hard and fast rule; there probably are some apps out there that do need to take screen orientation into consideration, even though they don’t draw graphics depicting the sensor data. But, if your app just uses sensors in the background, there’s a good chance you won’t need to make any changes.</p><h4>Apps That Work in Both Portrait and Landscape</h4><p>Most Android apps work fine in both portrait and landscape, using the standard tools. If your app is one of these and you also use sensors, the only change your app probably requires is a tweak to use the behavior I outlined above. That is:</p><ul><li><p>Don’t assume that portrait is the default mode.</p></li><li><p>Don’t assume that locking your app to portrait mode solves this issue.</p></li><li><p>Don’t assume that disabling sensor-based reorientation solves this issue (since reorientations also occur on some devices when the user opens a keyboard.)</p></li><li><p>Check for the current device orientation via <code>getRotation()</code>, and compensate accordingly, as detailed earlier.</p></li></ul><h4>Apps That Only Work in One Orientation</h4><p>Some apps&nbsp;&mdash;&nbsp;notably, many games&nbsp;&mdash;&nbsp;only work well (or at all!) in either portrait or landscape mode. It’s perfectly okay, of course, for such apps to lock themselves to the appropriate mode, and doing so simplifies the sensors quite a bit.</p><p>However, because Android devices actually support two landscape and two portrait modes, these apps still need to check the current orientation. That is, if an app locks itself to landscape mode, it will need to perform a compensation on portrait-default devices, but not on landscape-default devices. And of course&nbsp;&mdash;&nbsp;are you sick of hearing this yet?&nbsp;&mdash;&nbsp;this can be accomplished by checking the result of <code>getRotation()</code>.</p><p>Phew! Quite a mouthful for what is a fairly straightforward notion, once you understand what’s going on. But if I had to distill all that down into a single sentence, it would be this:  <code>android.view.Display.getRotation()</code> is your friend.</p><p>I hope you’ve found this information useful; what’s more, I hope you’ve found it practical. We’ll keep improving our SDK and docs, and I hope you’ll keep improving your apps.</p><p>Happy coding!</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-1800405278316157173?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=Zne68o4qbco:W97EEcOYD4w:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=Zne68o4qbco:W97EEcOYD4w:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=Zne68o4qbco:W97EEcOYD4w:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/Zne68o4qbco" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/1800405278316157173?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/1800405278316157173?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:97:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/Zne68o4qbco/one-screen-turn-deserves-another.html";s:5:"title";s:32:"One Screen Turn Deserves Another";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-09T14:19:28.056-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:87:"http://3.bp.blogspot.com/_GTM_W5mVPTU/TH_WXasAf0I/AAAAAAAAAKg/gRhqNnRJovQ/s72-c/Dan.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:84:"http://android-developers.blogspot.com/2010/09/one-screen-turn-deserves-another.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:13;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"DEQDRX08fyp7ImA9Wx5QFEk."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-1061841889670941399";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-01T23:51:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-02T09:52:54.377-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:20:"Brace for the Future";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:5793:"<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_GTM_W5mVPTU/TH_WXasAf0I/AAAAAAAAAKg/gRhqNnRJovQ/s1600/Dan.png"><img style="float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 320px; height: 320px;" src="http://3.bp.blogspot.com/_GTM_W5mVPTU/TH_WXasAf0I/AAAAAAAAAKg/gRhqNnRJovQ/s320/Dan.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5512360166714015554" /></a><p><i>[This post is by Dan Morrill, Open Source &amp; Compatibility Program Manager. — Tim Bray]</i></p><p>Way back in November 2007 when Google announced Android, Andy Rubin said “We hope thousands of different phones will be powered by Android.”  But now, Android’s growing beyond phones to new kinds of devices. (For instance, you might have read about the new 7” <a href="http://galaxytab.samsungmobile.com/">Galaxy Tab</a> that our partners at Samsung just announced.) So, I wanted to point out a few interesting new gadgets that are coming soon running the latest versions of Android, 2.1 and 2.2.</p><p>For starters, the first Android-based non-phone handheld devices will be shipping over the next few months. Some people call these Mobile Internet Devices or Personal Media Players&nbsp;&mdash;&nbsp;MIDs or PMPs.  Except for the phone part, PMP/MID devices look and work just like smartphones, but if your app really does require phone hardware to work correctly, you can follow some simple steps to <a href="http://android-developers.blogspot.com/2010/06/future-proofing-your-app.html">make sure your app only appears on phones</a>.</p><p>Next up are tablets. Besides the Samsung Galaxy Tab I mentioned, the <a href="http://www.dell.com/content/products/productdetails.aspx/mobile-streak">Dell Streak</a> is now on sale, which has a 5” screen and blurs the line between a phone and a tablet. Of course, Android has supported screens of any size since version 1.6, but these are the first large-screen devices to actually ship with Android Market. A tablet’s biggest quirk, of course, is its larger screen.</p><p>It’s pretty rare that we see problems with existing apps running on large-screen devices, but at the same time many apps would benefit from making better use of the additional screen space. For instance, an email app might be improved by changing its UI from a list-oriented layout to a two-pane view. Fortunately, Android and the SDK <a href="http://developer.android.com/guide/practices/screens_support.html">make it easy to support multiple screen sizes</a> in your app, so you can read up on our documentation and make sure your app makes the best use of the extra space on large screens.</p><p>Speaking of screen quirks, we’re also seeing the first devices whose natural screen orientation is landscape. For instance, Motorola’s <a href="http://www.motorola.com/Consumers/US-EN/Consumer-Product-and-Services/Mobile-Phones/MOTOROLA-CHARM-with-MOTOBLUR-US-EN">CHARM</a> and <a href="http://www.motorola.com/Consumers/GB-EN/Consumer-Products-and-Services/Mobile-Phones/MOTOROLA-FLIPOUT-with-MOTOBLUR-GB-EN">FLIPOUT</a> phones have screens which are wider than they are tall, when used in the natural orientation. The majority of apps won’t even notice the difference, but if your app uses sensors like accelerometer or compass, you might need to double-check your code.</p><p>Now, the devices I’ve mentioned so far still have the same hardware that Android phones have, like compass and accelerometer sensors, cameras, and so on. However, there are also devices coming that will omit some of this hardware. For instance, you’ve probably heard of <a href="http://www.google.com/tv/">Google TV</a>, which will get Android Market in 2011. Since Google TV is, you know, a stationary object, it won’t have a compass and accelerometer. It also won’t have a standard camera, since we decided there wasn’t a big audience for pictures of the dust bunnies behind your TV.</p><p>Fortunately, you can use our built-in tools to handle these cases and <a href="http://developer.android.com/guide/appendix/market-filters.html">control which devices your app appears to</a> in Android Market. Android lets you provide versions of your UI optimized for various screen configurations, and each device will pick the one that runs best. Meanwhile, Android Market will make sure your apps only appear to devices that can run them, by matching those features you list as required (via <uses-feature> tags) only with devices that have those features.</p><p>Android started on phones, but we’re growing to fit new kinds of devices. Now your Android app can run on almost anything, and the potential size of your audience is growing fast. But to fully unlock this additional reach, you should double-check your app and tweak it if you need to, so that it puts its best foot forward. Watch this blog over the next few weeks, as we post a series of detailed “tips and tricks” articles on how to get the most out of the new gadgets.</p><p>It’s official folks: we’re living in the future! Happy coding.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-1061841889670941399?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=eB-xdXYqJTQ:PLMduz8se_g:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=eB-xdXYqJTQ:PLMduz8se_g:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=eB-xdXYqJTQ:PLMduz8se_g:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/eB-xdXYqJTQ" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/1061841889670941399?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/1061841889670941399?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:81:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/eB-xdXYqJTQ/brace-for-future.html";s:5:"title";s:20:"Brace for the Future";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-02T09:52:54.377-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:87:"http://3.bp.blogspot.com/_GTM_W5mVPTU/TH_WXasAf0I/AAAAAAAAAKg/gRhqNnRJovQ/s72-c/Dan.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:68:"http://android-developers.blogspot.com/2010/09/brace-for-future.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:14;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"C08FRng6fip7ImA9Wx5QFEw."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-1739682987891977804";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-01T13:13:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-02T00:16:57.616-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:33:"Securing Android LVL Applications";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:18160:"<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_GTM_W5mVPTU/TH7Sz9PolvI/AAAAAAAAAKI/HqHS3oqd5OE/s1600/trevor.png"><img style="border: 5px solid #ddd; float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 185px; height: 228px;" src="http://4.bp.blogspot.com/_GTM_W5mVPTU/TH7Sz9PolvI/AAAAAAAAAKI/HqHS3oqd5OE/s400/trevor.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5512074784003364594" /></a>
<p><i>[This post is by Trevor Johns, who's a Developer Programs Engineer working on Android. — Tim Bray]</i></p><p>The <a href="http://developer.android.com/guide/publishing/licensing.html">Android Market licensing service</a> is a powerful tool for protecting your applications against unauthorized use. The License Verification Library (LVL) is a key component. A determined attacker who’s willing to disassemble and reassemble code can eventually hack around the service; but application developers can make the hackers’ task immensely more difficult, to the point where it may simply not be worth their time.</p><p>Out of the box, the LVL protects against casual piracy; users who try to copy APKs directly from one device to another without purchasing the application. Here are some techniques to make things hard, even for technically skilled attackers who attempt to decompile your application and remove or disable LVL-related code.</p><ul><li><p>You can obfuscate your application to make it difficult to reverse-engineer.</p></li><li><p>You can modify the licensing library itself to make it difficult to apply common cracking techniques.</p></li><li><p>You can make your application tamper-resistant.</p></li><li><p>You can offload license validation to a trusted server.</p></li></ul><p>This can and should be done differently by each app developer. A guiding principle in the design of the licensing service is that attackers must be forced to crack each application individually, and unfortunately no client-side code can be made 100% secure. As a result, we depend on developers introducing additional complexity and heterogeneity into the license check code&nbsp;—&nbsp;something which requires human ingenuity and and a detailed knowledge of the application the license library is being integrated into.</p><h3>Technique: Code Obfuscation</h3><p>The first line of defense in your application should be code obfuscation. Code obfuscation will not protect against automated attacks, and it doesn’t alter the flow of your program. However, it does make it more difficult for attackers to write the initial attack for an application, by removing symbols that would quickly reveal the original structure of a compiled application. As such, we <i>strongly</i> recommend using code obfuscation in all LVL installations.</p><p>To understand what an obfuscator does, consider the build process for your application: Your application is compiled and converted into .dex files and packaged in an APK for distribution on devices. The bytecode contains references to the original code&nbsp;—&nbsp;packages, classes, methods, and fields all retain their original (human readable) names in the compiled code. Attackers use this information to help reverse-engineer your program, and ultimately disable the license check.</p><p>Obfuscators replace these names with short, machine generated alternatives. Rather than seeing a call to <code>dontAllow()</code>, an attacker would see a call to <code>a()</code>. This makes it more difficult to intuit the purpose of these functions without access to the original source code.</p><p>There are a number of commercial and open-source obfuscators available for Java that will work with Android. We have had good experience with <a href="http://proguard.sourceforge.net/">ProGuard</a>, but we encourage you to explore a range of obfuscators to find the solution that works best for you.</p><p>We will be publishing a separate article soon that provides detailed advice on working with ProGuard. Until then, please refer to the ProGuard documentation.</p><h3>Technique: Modifying the license library</h3><p>The second line of defense against attack from crackers is to modify the license verification library in such a way that it’s difficult for an attacker to modify the disassembled code and get a positive license check as result.</p><p>This actually provides protection against two different types of attack: it protects against attackers trying to crack your application, but it also prevents attacks designed to target other applications (or even the stock LVL distribution itself) from being easily ported over to your application. The goal should be to both increase the complexity of your application’s bytecode and make your application’s LVL implementation unique.</p><p>When modifying the license library, there are three areas that you will want to focus on:</p><ul><li><p>The core licensing library logic.</p></li><li><p>The entry/exit points of the licensing library.</p></li><li><p>How your application invokes the licensing library and handles the license response.</p></li></ul><p>In the case of the core licensing library, you’ll primarily want to focus on two classes which comprise the core of the LVL logic: <code>LicenseChecker</code> and <code>LicenseValidator</code>.</p><p>Quite simply, your goal is to modify these two classes as much as possible, in any way possible, while still retaining the original function of the application. Here are some ideas to get you started, but you’re encouraged to be creative:</p><ul><li><p>Replace  <code>switch</code> statements with <code>if</code> statements.</p></li><li><p>Use XOR or hash functions to derive new values for any constants used  and check for those instead. </p></li><li><p>Remove  unused code. For instance, if you’re sure you won’t need swappable policies, remove the Policy interface and implement the policy verification inline with the rest of <code>LicenseValidator</code>.</p></li><li><p>Move the entirety of the LVL into your own application’s package. </p></li><li><p>Spawn additional threads to handle different parts of license validation. </p></li><li><p>Replace  functions with inline code where possible.</p></li></ul><p>For example, consider the following function from <code>LicenseValidator</code>:</p><pre><code>public void verify(PublicKey publicKey, int responseCode, String signedData, String signature) {
    // ... Response validation code omitted for brevity ...
    switch (responseCode) {
        // In Java bytecode, LICENSED will be converted to the constant 0x0
        case LICENSED:
        case LICENSED_OLD_KEY:
            LicenseResponse limiterResponse = mDeviceLimiter.isDeviceAllowed(userId);
            handleResponse(limiterResponse, data);
            break;
        // NOT_LICENSED will be converted to the constant 0x1
        case NOT_LICENSED:
            handleResponse(LicenseResponse.NOT_LICENSED, data);
            break;
        // ... Extra response codes also removed for brevity ...
    }</code></pre><p>In this example, an attacker might try to swap the code belonging to the <code>LICENSED</code> and <code>NOT_LICENSED</code> cases, so that an unlicensed user will be treated as licensed. The integer values for <code>LICENSED (0x0)</code> and <code>NOT_LICENSED (0x1)</code> will be known to an attacker by studying the LVL source, so even obfuscation makes it very easy to locate where this check is performed in your application’s bytecode.</p><p>To make this more difficult, consider the following modification:</p><pre><code>public void verify(PublicKey publicKey, int responseCode, String signedData, String signature) {
       // ... Response validation code omitted for brevity …
        
        // Compute a derivative version of the response code
        // Ideally, this should be placed as far from the responseCode switch as possible,
        // to prevent attackers from noticing the call to the CRC32 library, which would be
        // a strong hint as to what we're done here. If you can add additional transformations
        // elsewhere in before this value is used, that's even better.
        java.util.zip.CRC32 crc32 = new java.util.zip.CRC32();
        crc32.update(responseCode);
        int transformedResponseCode = crc32.getValue();

        // ... put unrelated application code here ...
        // crc32(LICENSED) == 3523407757
        if (transformedResponse == 3523407757) {
            LicenseResponse limiterResponse = mDeviceLimiter.isDeviceAllowed(userId);
            handleResponse(limiterResponse, data);
        }
        // ... put unrelated application code here ...
        // crc32(LICENSED_OLD_KEY) == 1007455905
        if (transformedResponseCode == 1007455905) {
            LicenseResponse limiterResponse = mDeviceLimiter.isDeviceAllowed(userId);
            handleResponse(limiterResponse, data);
        }
        // ... put unrelated application code here ...
        // crc32(NOT_LICENSED) == 2768625435
        if (transformedResponseCode == 2768625435):
            userIsntLicensed();
        }
    }</code></pre><p>In this example, we’ve added additional code to transform the license response code into a different value. We’ve also removed the switch block, allowing us to inject unrelated application code between the three license response checks. (Remember: The goal is to make your application’s LVL implementation unique. Do not copy the code above verbatim&nbsp;&mdash;&nbsp;come up with your own approach.)</p><p>For the entry/exit points, be aware that attackers may try to write a counterfeit version of the LVL that implements the same public interface, then try to swap out the relevant classes in your application. To prevent this, consider adding additional arguments to the <code>LicenseChecker</code> constructor, as well as <code>allow()</code> and <code>dontAllow()</code> in the <code>LicenseCheckerCallback</code>. For example, you could pass in a nonce (a unique value) to <code>LicenseChecker</code> that must also be present when calling <code>allow()</code>.</p><p>Note: Renaming <code>allow()</code> and <code>dontAllow()</code> won’t make a difference, assuming that you’re using an obfuscator. The obfuscator will automatically rename these functions for you.</p><p>Be aware that attackers might try and attack the calls in your application to the LVL. For example, if you display a dialogue on license failure with an “Exit” button, consider what would happen if an attacker were to comment out the line of code that displayed that window. If the user never pushes the “Exit” button in the dialog (which is no not being displayed) will your application still terminate? To prevent this, consider invoking a different Activity to handle informing a user that their license is invalid, and immediately terminating the original Activity; add additional finish() statements to other parts of your code that get will get executed in case the original one gets disabled; or set a timer that will cause your application to be terminated after a timeout. It’s also a good idea to defer the license check until your application has been running a few minutes, since attackers will be expecting the license check to occur during your application’s launch.</p><p>Finally, be aware that certain methods cannot be obfuscated, even when using a tool such as ProGuard. As a key example, <code>onCreate()</code> cannot be renamed, since it needs to remain callable by the Android system. Avoid putting license check code in these methods, since attackers will be looking for the LVL there.</p><h3>Technique: Make your application tamper-resistant</h3><p>In order for an attacker to remove the LVL from your code, they have to modify your code. Unless done precisely, this can be detected by your code. There are a few approaches you can use here.</p><p>The most obvious mechanism is to use a lightweight hash function, such as CRC32, and build a hash of your application’s code. You can then compare this checksum with a known good value. You can find the path of your application’s files by calling <code>context.GetApplicationInfo()</code>&nbsp;&mdash;&nbsp;just be sure not to compute a checksum of the file that contains your checksum! (Consider storing this information on a third-party server.)</p><!--<p>A simpler, and perhaps less obvious approach, is to simply check how your application was installed. If you know that your application will only be distributed through Android Market, you can verify that Android Market is listed as the installer for the application:</p><pre><code>PackageManager pm = context.getPackageManager();
String installer = pm.GetInstallerPackageName(getApplicationInfo().packageName);

if (!"com.google.android.feedback".equals(installer)) {
    // Application was installed via other means than Android Market.
    // Assuming there are no other distribution channels, this APK has probably been
    // tampered with.
}</code></pre><p>Consider using obfuscation techniques so that the installer package name never actually appears in your compiled source. For example, you can use the crc32() trick mentioned earlier, compute a md5(), or even use <a href="http://en.wikipedia.org/wiki/ROT13">ROT13</a>.</p>--><p><i>[In a late edit, we removed a suggestion that you use a check that relies on <code>GetInstallerPackageName</code> when our of our senior engineers pointed out that this is undocumented, unsupported, and only happens to work by accident.&nbsp;&ndash;Tim]</i></p><p>Also, you can check to see if your application is debuggable.  If your application tries to keep itself from performing normally if the debug flag is set, it may be harder for an attacker to compromise:</p><pre><code>boolean isDebuggable =  ( 0 != ( getApplcationInfo().flags &= ApplicationInfo.FLAG_DEBUGGABLE ) );</code></pre><h3>Technique: Offload license validation to a trusted server</h3><p>If your application has an online component, a very powerful technique to prevent piracy is to send a copy of the license server response, contained inside the <code>ResponseData</code> class, along with its signature, to your online server. Your server can then verify that the user is licensed, and if not refuse to serve any online content.</p><p>Since the license response is cryptographically signed, your server can check to make sure that the license response hasn’t been tampered with by using the public RSA key stored in the Android Market publisher console.</p><p>When performing the server-side validation, you will want to check all of the following:</p><ul><li><p>That the response signature is valid.</p></li><li><p>That the license service returned a LICENSED response.</p></li><li><p>That the package name and version code match the correct application.</p></li><li><p>That the license response has not expired (check the VT license response extra).</p></li><li><p>You should also log the userId field to ensure that a cracked application isn’t replaying a license response from another licensed user. (This would be visible by an abnormally high number of license checks coming from a single userId.)</p></li></ul><p>To see how to properly verify a license response, look at <a href="http://code.google.com/p/marketlicensing/source/browse/library/src/com/android/vending/licensing/LicenseValidator.java"><code>LicenseValidator.verify()</code></a>.</p><p>As long as the license check is entirely handled within server-code (and your server itself is secure), it’s worth nothing that even an expert cracker cannot circumvent this mechanism. This is because your server is a trusted computing environment.</p><p>Remember that any code running on a computer under the user’s control (including their Android device) is untrusted. If you choose to inform the user that the server-side license validation has failed, this must only be done in an advisory capacity. You must still make sure that your server refuses to serve any content to an unlicensed user.</p><h3>Conclusion</h3><p>In summary, remember that your goal as an application developer is to make your application’s LVL implementation unique, difficult to trace when decompiled, and resistant to any changes that might be introduced. Realize that this might involve modifying your code in ways that seem counter-intuitive from a traditional software engineering viewpoint, such as removing functions and hiding license check routines inside unrelated code.</p><p>For added protection, consider moving the license check to a trusted server, where attackers will be unable to modify the license check code. While it’s impossible to write 100% secure validation code on client devices, this is attainable on a machine under your control.</p><p>And above all else, be creative. You have the advantage in that you have access to a fully annotated copy of your source code — attackers will be working with uncommented bytecode. Use this to your advantage.</p>Remember that, assuming you’ve followed the guidelines here, attackers will need to crack each new version of your application. Add new features and release often, and consider modifying your LVL implementation with each release to create additional work for attackers.</p><p>And above all else, listen to your users and keep them happy. The best defense against piracy isn’t technical, it’s emotional.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-1739682987891977804?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=tSDR_dTyLSE:3EVrnRX38YI:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=tSDR_dTyLSE:3EVrnRX38YI:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=tSDR_dTyLSE:3EVrnRX38YI:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/tSDR_dTyLSE" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/1739682987891977804?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/1739682987891977804?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:98:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/tSDR_dTyLSE/securing-android-lvl-applications.html";s:5:"title";s:33:"Securing Android LVL Applications";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-09-02T00:16:57.616-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:90:"http://4.bp.blogspot.com/_GTM_W5mVPTU/TH7Sz9PolvI/AAAAAAAAAKI/HqHS3oqd5OE/s72-c/trevor.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:85:"http://android-developers.blogspot.com/2010/09/securing-android-lvl-applications.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:15;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"CUUCQ3wyeCp7ImA9Wx5RFko."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-8711271492753073738";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-24T10:57:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-24T11:07:42.290-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:21:"Licensing Server News";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:3141:"<p>It’s been reported that someone has figured out, and published, a way to hack some Android apps to bypass our new Android Market licensing server. We’ll be saying more on this, but there are a few points that deserve to be made right now:</p><ul><li><p>The licensing service, while very young, is a significant step forward in terms of protection over the plain copy-protection facility that used to be the norm.  In the how-to-pirate piece, its author wrote: “For now, Google’s Licensing Service is still, in my opinion, the best option for copy protection.”</p></li><li><p>The licensing service provides infrastructure that developers can use to write custom authentication checks for each of their applications.  The first release shipped with the simplest, most transparent imaginable sample implementation, which was written to be easy to understand and modify, rather than security-focused. </p></li><li><p>Some developers are using this sample as-is, which makes their applications easier to attack.  The attacks we’ve seen so far are also all on applications that have neglected to obfuscate their code, a practice that <a href="http://developer.android.com/guide/publishing/licensing.html#app-obfuscation">we strongly recommend</a>.  We’ll be publishing detailed instructions for developers on how to do this.</p></li><li><p>The number of apps that have migrated to the licensing server at this point in time is very small.  It will grow, because the server is a step forward.</p></li><li><p>100% piracy protection is never possible in any system that runs third-party code, but the licensing server, when correctly implemented and customized for your app, is designed to dramatically increase the cost and difficulty of pirating.</p></li><li><p>The best attack on pirates is to make their work more difficult and expensive, while simultaneously making the legal path to products straightforward, easy, and fast.  Piracy is a bad business to be in when the user has a choice between easily purchasing the app and visiting an untrustworthy, black-market site.</p></li></ul><p>Android Market is already a responsive, low-friction, safe way for developer to get their products to users.  The licensing server makes it safer, and we will continue to improve it.  The economics are already working for the developers and against the pirates, and are only going to tilt further in that direction.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-8711271492753073738?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=5Ula4N8L_i0:9i2LV4WWq2c:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=5Ula4N8L_i0:9i2LV4WWq2c:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=5Ula4N8L_i0:9i2LV4WWq2c:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/5Ula4N8L_i0" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8711271492753073738?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8711271492753073738?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:86:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/5Ula4N8L_i0/licensing-server-news.html";s:5:"title";s:21:"Licensing Server News";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-24T11:07:42.290-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:73:"http://android-developers.blogspot.com/2010/08/licensing-server-news.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:16;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"D0QGRXw9cCp7ImA9Wx5REkU."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-6362096886143833761";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-19T23:18:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-19T23:22:04.268-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:20:"A Little Too Popular";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:1350:"<p>A couple of weeks ago, we arranged that registered developers could buy an unlocked Nexus One via their publisher page in Android Market. We think it’s a good development platform and a nice phone. Apparently, you agree. Somewhat too many of you, in fact; we blew through the (substantial) initial inventory in almost no time, and they’re back-ordered from HTC, who are doing a pretty good job of managing runaway success amid a worldwide AMOLED shortage. Everyone appreciates that it’s important to the platform to get phones in the hands of developers, so we’re working hard on re-stocking the shelves; stand by.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-6362096886143833761?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=PM2rbVCHDSY:rE41PNnTqhE:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=PM2rbVCHDSY:rE41PNnTqhE:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=PM2rbVCHDSY:rE41PNnTqhE:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/PM2rbVCHDSY" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/6362096886143833761?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/6362096886143833761?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:83:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/PM2rbVCHDSY/little-too-popular.html";s:5:"title";s:20:"A Little Too Popular";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-19T23:22:04.268-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:70:"http://android-developers.blogspot.com/2010/08/little-too-popular.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:17;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"C04FQ3g5cCp7ImA9Wx5SGUo."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-7114245151565462300";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-16T08:08:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-16T08:18:32.628-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:20:"Two Simple Questions";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:1546:"<p>And the answers to them, posted here and there by senior Android engineers.</p><h3>How much memory is my app using?</h3><p>Over at Stack Overflow, our own Dianne Hackborn <a href="http://stackoverflow.com/questions/2298208/how-to-discovery-memory-usage-on-my-application-in-android/2299813">takes this up in detail</a>.  There's no simple answer, but Dianne does offer lots of useful information.</p><h3>How do I make a ScrollView behave?</h3><p>This one does have a simple answer, and our Romain Guy offers it in <a href="http://www.curious-creature.org/2010/08/15/scrollviews-handy-trick/">ScrollView’s handy trick</a>.  It's easy enough to do once you know how, which is harder to find out than you might think, because there's one useful XML attribute that's there in the examples but missing in the docs.  Oops!</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-7114245151565462300?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=xqacWPcUfV0:7aEqGtBXd9Q:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=xqacWPcUfV0:7aEqGtBXd9Q:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=xqacWPcUfV0:7aEqGtBXd9Q:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/xqacWPcUfV0" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/7114245151565462300?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/7114245151565462300?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:85:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/xqacWPcUfV0/two-simple-questions.html";s:5:"title";s:20:"Two Simple Questions";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-16T08:18:32.628-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:72:"http://android-developers.blogspot.com/2010/08/two-simple-questions.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:18;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"DkIARH87fCp7ImA9Wx5SFkg."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-7998596745086857933";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-11T10:05:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-12T16:09:05.104-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:63:"Powering Chrome to Phone with Android Cloud to Device Messaging";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:4726:"<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TGQv1YcFHLI/AAAAAAAAAJ4/yC90s-2Bg8I/s1600/db.png"><img style="border: 5px solid #ddd; float:left;float:left; margin:0 10px 10px 0;cursor:pointer; cursor:hand;width: 162px; height: 200px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TGQv1YcFHLI/AAAAAAAAAJ4/yC90s-2Bg8I/s200/db.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5504577238693387442" /></a><p><i>[This post is by Dave Burke, who's an Engineering Manager 80% of the time. — Tim Bray]</i></p><p>Android <a href="http://code.google.com/android/c2dm/">Cloud to Device Messaging (C2DM)</a> was launched recently as part of Android 2.2. C2DM enables third-party developers to push lightweight data messages to the phone. C2DM created a nice opportunity for us to pull together different Google developer tools to create a simple but useful application to enable users to push links and other information from their desktop / laptop to their phone. The result was Chrome to Phone - a <a href="http://www.google.com/intl/en/jobs/lifeatgoogle/englife/">20-percent time</a> project at Google.</p><p><a href="http://chrome.blogspot.com/">Chrome to Phone</a> comprises a Chrome Extension, an Android Application, and a Google AppEngine server. All of the code is open sourced and serves as a nice example of how to use C2DM.</p><p>The message flow in Chrome to Phone is fairly typical of a push service:</p><ol><li><p>The Android Application registers with the C2DM service and gets a device registration ID for the user. It sends this registration ID along with the user's account name to the AppEngine server. </p></li><li><p>The AppEngine server authenticates the user account and stores the mapping from account name to device registration ID. </p></li><li><p>The Chrome Extension accesses the URL and page title for the current tab, and POSTs it to the AppEngine server. </p></li><li><p>The AppEngine server authenticates the user and looks up the corresponding device registration ID for the user account name. It then HTTP POSTs the URL and title to Google's C2DM servers, which subsequently route the message to the device, resulting in an <a href="http://developer.android.com/guide/topics/intents/intents-filters.html">Intent broadcast</a>.</p></li><li><p>The Android application is woken by its Intent receiver. The Android application then routes the URL to the appropriate application via a new Intent (e.g. browser, dialer, or Google Maps).</p></li></ol><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_GTM_W5mVPTU/TGOUEgC2WEI/AAAAAAAAAJg/-0cdTPhTSSg/s1600/c2p.png"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 149px;" src="http://2.bp.blogspot.com/_GTM_W5mVPTU/TGOUEgC2WEI/AAAAAAAAAJg/-0cdTPhTSSg/s400/c2p.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5504405974619150402" /></a><p>An interesting design choice in this application was to send the payload (URL and title) as part of the push message. A hash of the URL is used as a <code>collapse_key</code> to prevent multiple button presses resulting in duplicate intents.  In principle the whole URL could have been used, but the hash is shorter and avoids unnecessarily exposing payload data.  An alternative approach (and indeed the preferred one for larger payloads) is to use the push message service as a tickle to wake up the application, which would subsequently fetch the payload out-of-band, e.g. over HTTP.</p><p>The code for Chrome to Phone <a href="http://code.google.com/p/chrometophone">is online</a>. Both the AppEngine and Android Application include a reusable package called com.google.android.c2dm that handles the lower-level C2DM interactions (e.g. configuration, task queues for resilience, etc).</p><p>Chrome to Phone is useful, but maybe it’s most interesting as an example of how to use Android C2DM.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-7998596745086857933?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=TQIMd8L5RCI:HNjcSbzdvwA:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=TQIMd8L5RCI:HNjcSbzdvwA:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=TQIMd8L5RCI:HNjcSbzdvwA:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/TQIMd8L5RCI" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/7998596745086857933?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/7998596745086857933?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:102:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/TQIMd8L5RCI/powering-chrome-to-phone-with-android.html";s:5:"title";s:63:"Powering Chrome to Phone with Android Cloud to Device Messaging";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-12T16:09:05.104-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:86:"http://1.bp.blogspot.com/_GTM_W5mVPTU/TGQv1YcFHLI/AAAAAAAAAJ4/yC90s-2Bg8I/s72-c/db.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:89:"http://android-developers.blogspot.com/2010/08/powering-chrome-to-phone-with-android.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:19;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"D04BQXY8eip7ImA9Wx5SEUw."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-8081279360872876534";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-05T07:00:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-06T10:32:30.872-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:25:"Nexus One Developer Phone";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:2064:"<p>We've always offered unlocked phones for direct sale to registered Android Developers. As of today, the Developer Phone is the Nexus One, at a price of $529. To see the details or order a phone, you need to sign in to your Android developer account and click on the "Development Phones" link.</p><p>The Nexus One combines an up-to-the-minute platform (Android 2.2), modern hardware, and the pure Android software suite. It's a good choice both for people who want to build Android applications using either the SDK or the NDK, and those who want to experiment with modified versions of the Android platform.  Note that the Nexus One still ships with Android 2.1 but will download 2.2 soon after you turn it on; make sure you’re near a fast network.</p><p>As well as being an outstanding developer platform, it's a really nice everyday phone; we're really happy to have connected the right dots to make this happen.</p><p><i>[Update]:</i> A bunch of people have spoken up wondering about Nexus One accessories.  They are available right now in <a href="http://www.htcaccessorystore.com/uk/p_htc_phone.aspx?i=193858">HTC's European online store</a>.  When we get more news, we'll pass it along.</p><p><i>[Update, Aug 6th]:</i> The <a href="http://shopamerica.htc.com/accessories.htm?prId=37438">HTC US store</a> now has accessories too.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-8081279360872876534?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=lHMMi3-nT3w:PcAmK7aUIPU:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=lHMMi3-nT3w:PcAmK7aUIPU:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=lHMMi3-nT3w:PcAmK7aUIPU:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/lHMMi3-nT3w" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8081279360872876534?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8081279360872876534?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:90:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/lHMMi3-nT3w/nexus-one-developer-phone.html";s:5:"title";s:25:"Nexus One Developer Phone";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-06T10:32:30.872-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:77:"http://android-developers.blogspot.com/2010/08/nexus-one-developer-phone.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:20;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"CUUHQ34zfyp7ImA9Wx5TGUs."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-8207194011543400256";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-04T15:00:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-04T16:07:12.087-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:45:"Best Practices for Handling Android User Data";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:9166:"<a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TFnmnPrBzFI/AAAAAAAAAJU/AtgoDZN_1o8/s1600/nickblog.jpg"><img style="border: 5px solid #ddd; float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 200px; height: 200px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TFnmnPrBzFI/AAAAAAAAAJU/AtgoDZN_1o8/s200/nickblog.jpg" border="0" alt=""id="BLOGGER_PHOTO_ID_5501681981706062930" /></a><p><i>[This post is by Nick Kralevich, an engineer  on the Android Security Team. — Tim Bray]</i></p><p>As the use of mobile applications grows, people are paying more attention to how these applications use their data.  While the Android platform contains <a href="http://developer.android.com/guide/topics/security/security.html">extensive permissions</a> designed to protect users, application developers are ultimately responsible for how they handle users’ information.  It’s important for developers to understand the code they include, and consider the permissions they request, as mishandling these issues can result in users perceiving a violation of trust.</p><p>Maintaining a healthy and trustworthy ecosystem is in every Android developer’s best interest.</p><p>Here are a few tips for writing trustworthy Android applications:</p><ol><li><p>Maintain a privacy policy</p></li><li><p>Minimize permissions</p></li><li><p>Give your users a choice regarding data collection</p></li><li><p>Don’t collect unnecessary information</p></li><li><p>Don’t send data off the device</p></li><li><p>... but if you have to, use encryption and data minimization </p></li><li><p>Don’t use code you don’t understand</p></li><li><p>Don’t log device or user specific information.</p></li></ol><h3>Maintain a privacy policy</h3><p>Trustworthy applications are up-front about the data they collect and the reasons for collecting it.  Users are generally happy to share information via such apps if they believe they will personally benefit.  A clear and concise privacy policy, with details about the type of information collected and how it’s used, goes a long way towards generating trust and good will.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_GTM_W5mVPTU/TFnlmA_HkXI/AAAAAAAAAI0/vrFHHlHFOm8/s1600/privacyPolicy.png"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 240px; height: 400px;" src="http://3.bp.blogspot.com/_GTM_W5mVPTU/TFnlmA_HkXI/AAAAAAAAAI0/vrFHHlHFOm8/s400/privacyPolicy.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5501680861072298354" /></a><h3>Minimize permissions</h3><p>Android is unique among mobile operating systems for its simple, straightforward, operating-system-enforced permission model.  All Android applications must declare the permissions they require, and users must approve these permissions before the application is installed.  Users tend to distrust applications that require excessive permissions.</p><p>For example, a user installing this tic-tac-toe game might reasonably wonder why it needs to take pictures.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_GTM_W5mVPTU/TFnlyeHbhYI/AAAAAAAAAI8/ucuSV0WzFP0/s1600/tictactoe.png"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 240px; height: 400px;" src="http://4.bp.blogspot.com/_GTM_W5mVPTU/TFnlyeHbhYI/AAAAAAAAAI8/ucuSV0WzFP0/s400/tictactoe.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5501681075050218882" /></a><h3>Give your users a choice regarding data collection</h3><p>It’s called the <a href="http://weis2010.econinfosec.org/papers/session2/weis2010_brandimarte_pres.pdf ">paradox of privacy</a> [PDF, 890K].  Users are often happy to share their information, but they want control over that sharing.  Trustworthy applications give users control over their information.  For example, the Android Browser has privacy settings which enable users to control how their information is shared.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_GTM_W5mVPTU/TFnl5vCpO6I/AAAAAAAAAJE/9b_6kScYyfY/s1600/browserPrivacy.png"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 240px; height: 400px;" src="http://3.bp.blogspot.com/_GTM_W5mVPTU/TFnl5vCpO6I/AAAAAAAAAJE/9b_6kScYyfY/s400/browserPrivacy.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5501681199852632994" /></a><h3>Don’t collect unnecessary information</h3><p>Trustworthy applications limit the kinds of data they collect.  Collecting unnecessary information, especially if you never use it, just invites suspicion.  When in doubt, don’t collect it.</p><h3>Don’t send data off the device</h3><p>If you have to handle user data, ensure that the data remains on the device whenever possible.  Users are comforted knowing that their private information strictly resides in the phone.  Sending data outside the phone, even if done for the user’s benefit, tends to draw suspicion.</p><h3>... but if you have to, use encryption and data minimization</h3><p>Sometimes, the collection of data is necessary.  In that case, applications need to ensure that it is handled safely.  A privacy policy will avoid leading to surprised and irritated users; in some cases, it may be advisable to prompt the user before transmitting data off-device.</p><p>First, minimize the amount of data you collect.  Do you really need the user’s full phone number, or would the area code be sufficient?  Can you use a <a href="http://en.wikipedia.org/wiki/Cryptographic_hash_function">one-way cryptographic hash function</a> on the data before sending it to the server to help protect the user’s confidential information?</p><blockquote><h3>A case study: User Favorites</h3><p>Suppose you want your app to maintain a list of “favorites” for each of your users, without going through a full registration process.  In theory, you could do this by sending your server some combination of their phone number, device ID, or SIM ID.  But why take the chance of worrying people about privacy issues; why not send a one-way hashed signature of whatever the identifying information is?  Or even better, create a random unique id and store it on the phone, and use this unique id as the registration key for your application.</p><p>In the end, you’ll will still be able to retrieve their favorites, but you won’t need to send or store anything sensitive.</p></blockquote><p>Second, encryption is critical to the safe handling of user data.  Phones often operate on untrusted networks where attackers can sniff confidential traffic.  Encrypting data in transit is a critical part of protecting user information.</p><p>Finally, when communicating with a server over HTTP, it’s a good idea to avoid encoding user information in a URL that is used with HTTP GET; rather, POST it in a message body.  While using POST doesn’t guarantee that your information won’t be sniffed, putting it in the URL increases the likelihood that it will be automatically logged; out of the box, most web server software logs all the URLs that are received.</p><h3>Don’t use code you don’t understand</h3><p>In the open-source Android environment, it’s common (and good) practice to rely heavily on other people’s code, in the form of libraries and frameworks.  But if that code is handling your users’ information inappropriately, it’s your problem.  So make a point of checking code before you rely on it.</p><h3>Don’t log user or device specific information</h3><p>Application developers should be careful about on-device logs.  Android makes it easy to write to the phone’s log, and anyone who has looked at “logcat” output knows that it is full of important but seemingly random debugging information from many applications. In Android, logs are a shared resource, and are available to an application with the <a href="http://developer.android.com/reference/android/Manifest.permission.html#READ_LOGS">READ_LOGS</a> permission (only with user consent, of course!).  Even though the phone log data is temporary and erased on reboot, inappropriate logging of user information could inadvertently leak user data to other applications.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-8207194011543400256?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=Nk2jba3UGpk:kpGQVXzxi7g:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=Nk2jba3UGpk:kpGQVXzxi7g:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=Nk2jba3UGpk:kpGQVXzxi7g:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/Nk2jba3UGpk" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8207194011543400256?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8207194011543400256?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:100:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/Nk2jba3UGpk/best-practices-for-handling-android.html";s:5:"title";s:45:"Best Practices for Handling Android User Data";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-08-04T16:07:12.087-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:92:"http://1.bp.blogspot.com/_GTM_W5mVPTU/TFnmnPrBzFI/AAAAAAAAAJU/AtgoDZN_1o8/s72-c/nickblog.jpg";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:87:"http://android-developers.blogspot.com/2010/08/best-practices-for-handling-android.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:21;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"D0MBRXg6eip7ImA9Wx5TEks."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-1591304305675988072";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-07-27T14:00:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-07-27T14:17:34.612-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:39:"Licensing Service Technology Highlights";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:3254:"<p>We’ve just announced the introduction of a licensing server for Android Market. This should address one of the concerns we’ve heard repeatedly from the Android developer community.</p><p>The impact and intent, as outlined in the announcement, are straightforward. If you want to enable your app to use the licensing server, there’s no substitute for reading the authoritative documentation: <a href="http://developer.android.com/guide/publishing/licensing.html">Licensing Your Applications</a>. Here are some technical highlights.</p><ul><li><p>This capability has been in the Android Market client app since 1.5, so you don’t have to be running the latest Android flavor to use it.</p></li><li><p>It’s secure, based on a public/private key pair. Your requests to the server are signed with the public key and the responses from the server with the private key. There’s one key pair per publisher account.</p></li><li><p>Your app doesn’t talk directly to the licensing server; it IPCs to the Android Market client, which in turn takes care of talking to the server.</p></li><li><p>There’s a substantial tool-set that will ship with the SDK, the License Verification Library (LVL). It provides straightforward entry points for querying the server and handling results. Also, it includes modules that you can use to implement certain licensing policies that we expect to be popular.</p></li></ul><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://2.bp.blogspot.com/_GTM_W5mVPTU/TEcg5iIumHI/AAAAAAAAAIs/TWnJcDda8kY/s1600/lvl.png"><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 197px;" src="http://2.bp.blogspot.com/_GTM_W5mVPTU/TEcg5iIumHI/AAAAAAAAAIs/TWnJcDda8kY/s400/lvl.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5496398043017025650" /></a><ul><li><p>LVL is provided in source form as an Android Library project. It also comes with a testing framework.</p></li><li><p>There’s a Web UI on the publisher-facing part of the Market’s Web site for key management; it includes setup for production and testing.</p></li><li><p>Obviously, you can’t call out to the server when the device is off-network. In this situation you have to decide what to do; one option is to cache licensing status, and LVL includes prebuilt modules to support that.</p></li></ul><p>We think this is a major improvement over the copy-protection option we’ve offered up to this point, and look forward to feedback from developers.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-1591304305675988072?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=6EDXQR8fS4M:zSXhzhiV3qU:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=6EDXQR8fS4M:zSXhzhiV3qU:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=6EDXQR8fS4M:zSXhzhiV3qU:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/6EDXQR8fS4M" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/1591304305675988072?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/1591304305675988072?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:104:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/6EDXQR8fS4M/licensing-service-technology-highlights.html";s:5:"title";s:39:"Licensing Service Technology Highlights";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-07-27T14:17:34.612-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:87:"http://2.bp.blogspot.com/_GTM_W5mVPTU/TEcg5iIumHI/AAAAAAAAAIs/TWnJcDda8kY/s72-c/lvl.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:91:"http://android-developers.blogspot.com/2010/07/licensing-service-technology-highlights.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:22;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"A0QNSHYyeip7ImA9Wx5TEks."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-3087451940318475244";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-07-27T10:00:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-07-27T15:23:19.892-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:42:"Licensing Service For Android Applications";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:2673:"<p><i>[This post is by Eric Chu, Android Developer Ecosystem. — Tim Bray]</i></p><p>In my conversations with Android developers, I often hear that you’d like better protection against unauthorized use of your applications. So today, I’m pleased to announce the release of a licensing service for applications in Android Market. </p><p>This simple and free service provides a secure mechanism to manage access to all Android Market paid applications targeting Android 1.5 or higher.  At run time, with the inclusion of a set of libraries provided by us, your application can query the Android Market licensing server to determine the license status of your users.  It returns information on whether your users are authorized to use the app based on stored sales records.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://3.bp.blogspot.com/_GTM_W5mVPTU/TEcfz8iie7I/AAAAAAAAAIk/ymOZRWm-uiI/s1600/license.png"><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 313px;" src="http://3.bp.blogspot.com/_GTM_W5mVPTU/TEcfz8iie7I/AAAAAAAAAIk/ymOZRWm-uiI/s400/license.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5496396847513762738" /></a><p>This licensing service operating real time over the network provides more flexibility in choosing license-enforcement strategies, and a more secure approach in protecting your applications from unauthorized use, than copy protection.</p><p>The licensing service is available now; our plan is for it to replace the current Android Market copy-protection mechanism over the next few months.  I encourage you to check out the <a href="http://developer.android.com/guide/publishing/licensing.html">Licensing Your Applications</a> section of our Developer Guide and the <a href="http://market.android.com/support/">Android Market Help Center</a> to learn how you can take advantage of this new service immediately.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-3087451940318475244?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=DUnEx3Veb4I:6-XQmZSviKo:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=DUnEx3Veb4I:6-XQmZSviKo:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=DUnEx3Veb4I:6-XQmZSviKo:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/DUnEx3Veb4I" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/3087451940318475244?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/3087451940318475244?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:94:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/DUnEx3Veb4I/licensing-service-for-android.html";s:5:"title";s:42:"Licensing Service For Android Applications";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-07-27T15:23:19.892-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:91:"http://3.bp.blogspot.com/_GTM_W5mVPTU/TEcfz8iie7I/AAAAAAAAAIk/ymOZRWm-uiI/s72-c/license.png";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:81:"http://android-developers.blogspot.com/2010/07/licensing-service-for-android.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:23;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"C0UBRnYyfyp7ImA9WxFaGU4."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:3:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-8374539097770351025";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-07-23T17:24:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-07-23T17:27:37.897-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:27:"Adjustment to Market Legals";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:1511:"<p>Please note that we have updated the Android Market Developer Distribution Agreement (DDA). This is in preparation for some work we’re doing on introducing new payment options, which we think developers will like.</p><p>In the spirit of transparency, we wanted to highlight the changes:</p><ul><li><p>In Section 13.1, “authorized carriers” have been added as an indemnified party. </p></li><li><p>Section 13.2 is new in its entirety, covering indemnity for payment processors for claims related to tax accrual.</p></li></ul><p>These new terms apply immediately to anyone joining Android Market as a new publisher. Existing publishers have been notified of this change via email; they have up to 30 days to sign into the Android Market developer console to accept the new terms.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-8374539097770351025?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=vL_0KjSJJyg:Vh6Fc59JwdA:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=vL_0KjSJJyg:Vh6Fc59JwdA:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=vL_0KjSJJyg:Vh6Fc59JwdA:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/vL_0KjSJJyg" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8374539097770351025?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/8374539097770351025?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:92:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/vL_0KjSJJyg/adjustment-to-market-legals.html";s:5:"title";s:27:"Adjustment to Market Legals";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-07-23T17:27:37.897-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:79:"http://android-developers.blogspot.com/2010/07/adjustment-to-market-legals.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:24;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:32:"http://schemas.google.com/g/2005";a:1:{s:4:"etag";s:28:"W/"CU8ARHsyeyp7ImA9WxFaFUU."";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:4:{s:27:"http://www.w3.org/2005/Atom";a:7:{s:2:"id";a:1:{i:0;a:5:{s:4:"data";s:70:"tag:blogger.com,1999:blog-6755709643044947179.post-3695781802779295518";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:9:"published";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-07-19T11:41:00.000-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"updated";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-07-19T16:57:25.593-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:30:"Multithreading For Performance";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"content";a:1:{i:0;a:5:{s:4:"data";s:16587:"<p><i>[This post is by Gilles Debunne, an engineer in the Android group who loves to get multitasked. — Tim Bray]</i></p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://4.bp.blogspot.com/_GTM_W5mVPTU/TETMdFGF6II/AAAAAAAAAIc/Qyxsvuf2LUQ/s1600/gd2.jpg"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 294px; height: 400px;" src="http://4.bp.blogspot.com/_GTM_W5mVPTU/TETMdFGF6II/AAAAAAAAAIc/Qyxsvuf2LUQ/s400/gd2.jpg" border="0" alt=""id="BLOGGER_PHOTO_ID_5495742245254850690" /></a><p>A good practice in creating responsive applications is to make sure your main UI thread does the minimum amount of work. Any potentially long task that may hang your application should be handled in a different thread. Typical examples of such tasks are network operations, which involve unpredictable delays. Users will tolerate some pauses, especially if you provide feedback that something is in progress, but a frozen application gives them no clue.</p><p>In this article, we will create a simple image downloader that illustrates this pattern. We will populate a ListView with thumbnail images downloaded from the internet. Creating an asynchronous task that downloads in the background will keep our application fast. </p><h3>An Image downloader</h3><p>Downloading an image from the web is fairly simple, using the HTTP-related classes provided by the framework. Here is a possible implementation:</p><pre><code>static Bitmap downloadBitmap(String url) {
    final AndroidHttpClient client = AndroidHttpClient.newInstance("Android");
    final HttpGet getRequest = new HttpGet(url);

    try {
        HttpResponse response = client.execute(getRequest);
        final int statusCode = response.getStatusLine().getStatusCode();
        if (statusCode != HttpStatus.SC_OK) { 
            Log.w("ImageDownloader", "Error " + statusCode + " while retrieving bitmap from " + url); 
            return null;
        }
        
        final HttpEntity entity = response.getEntity();
        if (entity != null) {
            InputStream inputStream = null;
            try {
                inputStream = entity.getContent(); 
                final Bitmap bitmap = BitmapFactory.decodeStream(inputStream);
                return bitmap;
            } finally {
                if (inputStream != null) {
                    inputStream.close();  
                }
                entity.consumeContent();
            }
        }
    } catch (Exception e) {
        // Could provide a more explicit error message for IOException or IllegalStateException
        getRequest.abort();
        Log.w("ImageDownloader", "Error while retrieving bitmap from " + url, e.toString());
    } finally {
        if (client != null) {
            client.close();
        }
    }
    return null;
}</code></pre><p>A client and an HTTP request are created. If the request succeeds, the response entity stream containing the image is decoded to create the resulting Bitmap. Your applications' manifest must ask for the <code>INTERNET</code> to make this possible.</p><p>Note: a bug in the previous versions of <code>BitmapFactory.decodeStream</code> may prevent this code from working over a slow connection. Decode a new <code>FlushedInputStream(inputStream)</code> instead to fix the problem. Here is the implementation of this helper class:</p><pre><code>static class FlushedInputStream extends FilterInputStream {
    public FlushedInputStream(InputStream inputStream) {
        super(inputStream);
    }

    @Override
    public long skip(long n) throws IOException {
        long totalBytesSkipped = 0L;
        while (totalBytesSkipped < n) {
            long bytesSkipped = in.skip(n - totalBytesSkipped);
            if (bytesSkipped == 0L) {
                  int byte = read();
                  if (byte < 0) {
                      break;  // we reached EOF
                  } else {
                      bytesSkipped = 1; // we read one byte
                  }
           }
            totalBytesSkipped += bytesSkipped;
        }
        return totalBytesSkipped;
    }
}</code></pre><p>This ensures that skip() actually skips the provided number of bytes, unless we reach the end of file.</p><p>If you were to directly use this method in your ListAdapter's getView method, the resulting scrolling would be unpleasantly jaggy. Each display of a new view has to wait for an image download, which prevents smooth scrolling.</p><p>Indeed, this is such a bad idea that the AndroidHttpClient does not allow itself to be started from the main thread. The above code will display "This thread forbids HTTP requests" error messages instead. Use the DefaultHttpClient instead if you really want to shoot yourself in the foot.</p><h3>Introducing asynchronous tasks</h3><p>The <code>AsyncTask</code> class provides one of the simplest ways to fire off a new task from the UI thread. Let's create an <code>ImageDownloader</code> class which will be in charge of creating these tasks. It will provide a <code>download</code> method which will assign an image downloaded from its URL to an <code>ImageView</code>:</p><pre><code>public class ImageDownloader {

    public void download(String url, ImageView imageView) {
            BitmapDownloaderTask task = new BitmapDownloaderTask(imageView);
            task.execute(url);
        }
    }

    /* class BitmapDownloaderTask, see below */
}</code></pre><p>The <code>BitmapDownloaderTask</code> is the AsyncTask which will actually download the image. It is started using <code>execute</code>, which returns immediately hence making this method really fast which is the whole purpose since it will be called from the UI thread. Here is the implementation of this class:</p><pre><code>class BitmapDownloaderTask extends AsyncTask&lt;String, Void, Bitmap> {
    private String url;
    private final WeakReference&lt;ImageView> imageViewReference;

    public BitmapDownloaderTask(ImageView imageView) {
        imageViewReference = new WeakReference&lt;ImageView>(imageView);
    }

    @Override
    // Actual download method, run in the task thread
    protected Bitmap doInBackground(String... params) {
         // params comes from the execute() call: params[0] is the url.
         return downloadBitmap(params[0]);
    }

    @Override
    // Once the image is downloaded, associates it to the imageView
    protected void onPostExecute(Bitmap bitmap) {
        if (isCancelled()) {
            bitmap = null;
        }

        if (imageViewReference != null) {
            ImageView imageView = imageViewReference.get();
            if (imageView != null) {
                imageView.setImageBitmap(bitmap);
            }
        }
    }
}</code></pre><p>The <code>doInBackground</code> method is the one which is actually run in its own process by the task. It simply uses the <code>downloadBitmap</code> method we implemented at the beginning of this article.</p><p><code>onPostExecute</code> is run in the calling UI thread when the task is finished. It takes the resulting Bitmap as a parameter, which is simply associated with the imageView that was provided to <code>download</code> and was stored in the <code>BitmapDownloaderTask</code>. Note that this ImageView is stored as a <code>WeakReference</code>, so that a download in progress does not prevent a killed activity's ImageView from being garbage collected. This explains why we have to check that both the weak reference and the <code>imageView</code> are not null (i.e. were not collected) before using them in <code>onPostExecute</code>.</p><p>This simplified example illustrates the use on an <code>AsyncTask</code>, and if you try it, you'll see that these few lines of code actually dramatically improved the performance of the ListView which now scrolls smoothly. Read <a href="http://android-developers.blogspot.com/2009/05/painless-threading.html">Painless threading</a> for more details on AsyncTasks.</p><p>However, a ListView-specific behavior reveals a problem with our current implementation. Indeed, for memory efficiency reasons, ListView <em>recycles</em> the views that are displayed when the user scrolls. If one flings the list, a given ImageView object will be used many times. Each time it is displayed the ImageView correctly triggers an image download task, which will eventually change its image. So where is the problem? As with most parallel applications, the key issue is in the ordering. In our case, there's no guarantee that the download tasks will finish in the order in which they were started. The result is that the image finally displayed in the list may come from a previous item, which simply happened to have taken longer to download. This is not an issue if the images you download are bound once and for all to given ImageViews, but let's fix it for the common case where they are used in a list.</p><h3>Handling concurrency</h3><p>To solve this issue, we should remember the order of the downloads, so that the last started one is the one that will effectively be displayed. It is indeed sufficient for each ImageView to remember its last download. We will add this extra information in the ImageView using a dedicated Drawable subclass, which will be temporarily bind to the ImageView while the download is in progress. Here is the code of our <code>DownloadedDrawable</code> class:</p><pre><code>static class DownloadedDrawable extends ColorDrawable {
    private final WeakReference&lt;BitmapDownloaderTask> bitmapDownloaderTaskReference;

    public DownloadedDrawable(BitmapDownloaderTask bitmapDownloaderTask) {
        super(Color.BLACK);
        bitmapDownloaderTaskReference =
            new WeakReference&lt;BitmapDownloaderTask>(bitmapDownloaderTask);
    }

    public BitmapDownloaderTask getBitmapDownloaderTask() {
        return bitmapDownloaderTaskReference.get();
    }
}</code></pre><p>This implementation is backed by a <code>ColorDrawable</code>, which will result in the ImageView displaying a black background while its download is in progress. One could use a “download in progress” image instead, which would provide feedback to the user. Once again, note the use of a WeakReference to limit object dependencies.</p><p>Let's change our code to take this new class into account. First, the <code>download</code> method will now create an instance of this class and associate it with the imageView:</p><pre><code>public void download(String url, ImageView imageView) {
     if (cancelPotentialDownload(url, imageView)) {
         BitmapDownloaderTask task = new BitmapDownloaderTask(imageView);
         DownloadedDrawable downloadedDrawable = new DownloadedDrawable(task);
         imageView.setImageDrawable(downloadedDrawable);
         task.execute(url, cookie);
     }
}</code></pre><p>The <code>cancelPotentialDownload</code> method will stop the possible download in progress on this imageView since a new one is about to start. Note that this is not sufficient to guarantee that the newest download is always displayed, since the task may be finished, waiting in its <code>onPostExecute</code> method,  which may still may be executed <em>after</em> the one of this new download.</p><pre><code>private static boolean cancelPotentialDownload(String url, ImageView imageView) {
    BitmapDownloaderTask bitmapDownloaderTask = getBitmapDownloaderTask(imageView);

    if (bitmapDownloaderTask != null) {
        String bitmapUrl = bitmapDownloaderTask.url;
        if ((bitmapUrl == null) || (!bitmapUrl.equals(url))) {
            bitmapDownloaderTask.cancel(true);
        } else {
            // The same URL is already being downloaded.
            return false;
        }
    }
    return true;
}</code></pre><p><code>cancelPotentialDownload</code> uses the <code>cancel</code> method of the AsyncTask class to stop the download in progress. It returns <code>true</code> most of the time, so that the download can be started in <code>download</code>. The only reason we don't want this to happen is when a download is already in progress on the same URL in which case we let it continue. Note that with this implementation, if an ImageView is garbage collected, its associated download is not stopped. A <code>RecyclerListener</code> might be used for that.</p><p>This method uses a helper <code>getBitmapDownloaderTask</code> function, which is pretty straigthforward:</p><pre><code>private static BitmapDownloaderTask getBitmapDownloaderTask(ImageView imageView) {
    if (imageView != null) {
        Drawable drawable = imageView.getDrawable();
        if (drawable instanceof DownloadedDrawable) {
            DownloadedDrawable downloadedDrawable = (DownloadedDrawable)drawable;
            return downloadedDrawable.getBitmapDownloaderTask();
        }
    }
    return null;
}</code></pre><p>Finally, <code>onPostExecute</code> has to be modified so that it will bind the Bitmap only if this ImageView is still associated with <em>this</em> download process:</p><pre><code>if (imageViewReference != null) {
    ImageView imageView = imageViewReference.get();
    BitmapDownloaderTask bitmapDownloaderTask = getBitmapDownloaderTask(imageView);
    // Change bitmap only if this process is still associated with it
    if (this == bitmapDownloaderTask) {
        imageView.setImageBitmap(bitmap);
    }
}</code></pre><p>With these modifications, our <code>ImageDownloader</code> class provides the basic services we expect from it. Feel free to use it or the asynchronous pattern it illustrates in your applications to ensure their responsiveness.</p><h3>Demo</h3><p>The source code of this article is available <a href="http://code.google.com/p/android-imagedownloader/">online on Google Code</a>. You can switch between and compare the three different implementations that are described in this article  (no asynchronous task, no bitmap to task association and the final correct version). Note that the cache size has been limited to 10 images to better demonstrate the issues.</p><a onblur="try {parent.deselectBloggerImageGracefully();} catch(e) {}" href="http://1.bp.blogspot.com/_GTM_W5mVPTU/TETLoIzCOaI/AAAAAAAAAIU/1_u5-WwQT_I/s1600/thr.png"><img style="border: 5px solid #ddd; display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 240px; height: 400px;" src="http://1.bp.blogspot.com/_GTM_W5mVPTU/TETLoIzCOaI/AAAAAAAAAIU/1_u5-WwQT_I/s400/thr.png" border="0" alt=""id="BLOGGER_PHOTO_ID_5495741335715592610" /></a><h3>Future work</h3><p>This code was simplified to focus on its parallel aspects and many useful features are missing from our implementation. The <code>ImageDownloader</code> class would first clearly benefit from a cache, especially if it is used in conjuction with a ListView, which will probably display the same image many times as the user scrolls back and forth. This can easily be implemented using a Least Recently Used cache backed by a <code>LinkedHashMap</code> of URL to Bitmap <code>SoftReferences</code>. More involved cache mechanism could also rely on a local disk storage of the image. Thumbnails creation and image resizing could also be added if needed.</p><p>Download errors and time-outs are correctly handled by our implementation, which will return a <code>null</code> Bitmap in these case. One may want to display an error image instead.</p><p>Our HTTP request is pretty simple. One may want to add parameters or cookies to the request as required by certain web sites.</p><p>The AsyncTask class used in this article is a really convenient and easy way to defer some work from the UI thread. You may want to use the <code>Handler</code> class to have a finer control on what you do, such as controlling the total number of download threads which are running in parallel in this case.</p><div class="blogger-post-footer"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/6755709643044947179-3695781802779295518?l=android-developers.blogspot.com' alt='' /></div><div class="feedflare">
<a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=JT_yLbAjDHw:W5g6EaPqe74:yIl2AUoC8zA"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?d=yIl2AUoC8zA" border="0"></img></a> <a href="http://feeds.feedburner.com/~ff/blogspot/hsDu?a=JT_yLbAjDHw:W5g6EaPqe74:-BTjWOF_DHI"><img src="http://feeds.feedburner.com/~ff/blogspot/hsDu?i=JT_yLbAjDHw:W5g6EaPqe74:-BTjWOF_DHI" border="0"></img></a>
</div><img src="http://feeds.feedburner.com/~r/blogspot/hsDu/~4/JT_yLbAjDHw" height="1" width="1"/>";s:7:"attribs";a:1:{s:0:"";a:1:{s:4:"type";s:4:"html";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:3:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"edit";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/3695781802779295518?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:1;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"rel";s:4:"self";s:4:"type";s:20:"application/atom+xml";s:4:"href";s:86:"http://www.blogger.com/feeds/6755709643044947179/posts/default/3695781802779295518?v=2";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}i:2;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:4:{s:3:"rel";s:9:"alternate";s:4:"type";s:9:"text/html";s:4:"href";s:95:"http://feedproxy.google.com/~r/blogspot/hsDu/~3/JT_yLbAjDHw/multithreading-for-performance.html";s:5:"title";s:30:"Multithreading For Performance";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:6:"author";a:1:{i:0;a:6:{s:4:"data";s:0:"";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:2:{s:27:"http://www.w3.org/2005/Atom";a:3:{s:4:"name";a:1:{i:0;a:5:{s:4:"data";s:8:"Tim Bray";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:3:"uri";a:1:{i:0;a:5:{s:4:"data";s:51:"http://www.blogger.com/profile/00036641002026688852";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:5:"email";a:1:{i:0;a:5:{s:4:"data";s:19:"noreply@blogger.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:32:"http://schemas.google.com/g/2005";a:1:{s:16:"extendedProperty";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:2:{s:4:"name";s:16:"OpenSocialUserId";s:5:"value";s:20:"12214406582326019496";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:26:"http://www.w3.org/2007/app";a:1:{s:6:"edited";a:1:{i:0;a:5:{s:4:"data";s:29:"2010-07-19T16:57:25.593-07:00";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:29:"http://search.yahoo.com/mrss/";a:1:{s:9:"thumbnail";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:3:{s:3:"url";s:87:"http://4.bp.blogspot.com/_GTM_W5mVPTU/TETMdFGF6II/AAAAAAAAAIc/Qyxsvuf2LUQ/s72-c/gd2.jpg";s:6:"height";s:2:"72";s:5:"width";s:2:"72";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:8:"origLink";a:1:{i:0;a:5:{s:4:"data";s:82:"http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}s:36:"http://a9.com/-/spec/opensearch/1.1/";a:3:{s:12:"totalResults";a:1:{i:0;a:5:{s:4:"data";s:3:"176";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:10:"startIndex";a:1:{i:0;a:5:{s:4:"data";s:1:"1";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:12:"itemsPerPage";a:1:{i:0;a:5:{s:4:"data";s:2:"25";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}s:42:"http://rssnamespace.org/feedburner/ext/1.0";a:1:{s:4:"info";a:1:{i:0;a:5:{s:4:"data";s:0:"";s:7:"attribs";a:1:{s:0:"";a:1:{s:3:"uri";s:13:"blogspot/hsdu";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}}s:7:"headers";a:9:{s:12:"content-type";s:23:"text/xml; charset=UTF-8";s:4:"etag";s:27:"lhEViIn7wxponqdcxTqHOZ5SXKQ";s:13:"last-modified";s:29:"Thu, 25 Nov 2010 20:04:00 GMT";s:4:"date";s:29:"Thu, 25 Nov 2010 20:19:49 GMT";s:7:"expires";s:29:"Thu, 25 Nov 2010 20:19:49 GMT";s:13:"cache-control";s:18:"private, max-age=0";s:22:"x-content-type-options";s:7:"nosniff";s:16:"x-xss-protection";s:13:"1; mode=block";s:6:"server";s:3:"GSE";}s:5:"build";s:14:"20070715235228";}